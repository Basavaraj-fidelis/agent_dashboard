{"file_contents":{"design_guidelines.md":{"content":"# Multi-Agent Monitoring Dashboard Design Guidelines\n\n## Design Approach: Design System Approach\n**Selected System:** Carbon Design System approach with enterprise monitoring inspirations\n**Justification:** This is a utility-focused, information-dense monitoring application where performance, clarity, and operational efficiency are paramount. The design should prioritize data readability and functional hierarchy over visual flair.\n\n## Core Design Elements\n\n### A. Color Palette\n**Dark Mode Primary (recommended for monitoring environments):**\n- Background: 220 15% 8% (deep charcoal)\n- Surface: 220 12% 12% (elevated cards/panels)\n- Border: 220 8% 20% (subtle divisions)\n- Text Primary: 220 5% 95% (high contrast)\n- Text Secondary: 220 5% 70% (secondary info)\n\n**Light Mode Alternative:**\n- Background: 220 5% 98% (clean white)\n- Surface: 220 10% 95% (subtle gray cards)\n- Border: 220 8% 85% (soft divisions)\n\n**Status Colors:**\n- Success: 142 70% 45% (online/healthy)\n- Warning: 35 85% 55% (attention needed)\n- Error: 0 70% 50% (offline/critical)\n- Info: 210 70% 55% (neutral information)\n\n### B. Typography\n**Primary Font:** Inter or system font stack for excellent readability\n**Hierarchy:**\n- Headers: 600 weight, 1.5rem-2rem sizes\n- Body: 400 weight, 0.875rem-1rem sizes  \n- Data/Metrics: 500 weight, monospace for numerical consistency\n- Labels: 500 weight, 0.75rem for form labels and metadata\n\n### C. Layout System\n**Spacing Units:** Tailwind units 2, 4, 6, and 8 (8px, 16px, 24px, 32px)\n- Tight spacing (p-2, m-2) for dense data tables and metrics\n- Standard spacing (p-4, gap-4) for card layouts and main sections\n- Generous spacing (p-6, p-8) for main dashboard sections and page headers\n\n### D. Component Library\n\n**Core UI Elements:**\n- Status badges with dot indicators for online/offline states\n- Data cards with clean borders and subtle shadows\n- Metric cards with large numbers and trend indicators\n- Progress bars for disk usage, memory consumption\n\n**Navigation:**\n- Sidebar navigation with collapsible sections\n- Breadcrumb navigation for device drill-down\n- Tab navigation for switching between device details\n\n**Data Displays:**\n- Clean data tables with alternating row backgrounds\n- Expandable rows for detailed system information\n- Real-time updating metrics with subtle animations\n- Filterable and searchable device lists\n\n**Forms & Controls:**\n- Minimal input fields with clear labels\n- Dropdown filters for device status and types\n- Search bars with instant filtering capabilities\n\n**Overlays:**\n- Modal dialogs for detailed device configuration\n- Toast notifications for system alerts and updates\n- Tooltips for complex technical information\n\n### E. Dashboard-Specific Patterns\n\n**Device List View:**\n- Grid or table layout with device cards showing hostname, OS, last heartbeat\n- Clear visual hierarchy with status indicators prominently displayed\n- Quick actions accessible without navigation\n\n**Device Detail View:**\n- Multi-section layout with system info, processes, security, network tabs\n- Metrics displayed in organized cards with clear data hierarchy\n- Real-time updating capabilities with smooth transitions\n\n**Status Indicators:**\n- Consistent dot notation (green=online, red=offline, yellow=warning)\n- Last seen timestamps prominently displayed\n- Heartbeat indicators with visual pulse animations\n\n**Data Presentation:**\n- Tables with proper sorting and filtering capabilities\n- Percentage bars for resource utilization\n- Clean separation between different data types\n- Consistent formatting for technical specifications\n\nThe overall aesthetic should feel professional, trustworthy, and optimized for extended monitoring sessions, with excellent readability and efficient information density.","size_bytes":3736},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"142 70% 45%\",\n          warning: \"35 85% 55%\",\n          error: \"0 70% 50%\",\n          offline: \"220 8% 45%\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4035},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/Display_agent_open_ports_1759128566472.py":{"content":"# Display_agent_open_ports.py\r\nimport psutil\r\nimport socket\r\nfrom tabulate import tabulate\r\nimport datetime\r\nimport json\r\n\r\nSERVICE_MAP = {\r\n    135: (\"RPC\", True),\r\n    139: (\"NetBIOS\", True),\r\n    445: (\"SMB\", True),\r\n    5000: (\"Web/Flask\", True),\r\n    5432: (\"PostgreSQL\", True),\r\n    7070: (\"AnyDesk/Remote\", True),\r\n    8080: (\"HTTP-alt\", True),\r\n}\r\n\r\ndef get_open_ports():\r\n    \"\"\"Return list of open ports with details.\"\"\"\r\n    connections = psutil.net_connections(kind=\"inet\")\r\n    open_ports = []\r\n\r\n    for conn in connections:\r\n        laddr = conn.laddr\r\n        if not laddr:\r\n            continue\r\n        ip = laddr.ip\r\n        port = laddr.port\r\n        proto = \"TCP\" if conn.type == socket.SOCK_STREAM else \"UDP\"\r\n        proc_name = \"Unknown\"\r\n        try:\r\n            if conn.pid:\r\n                proc_name = psutil.Process(conn.pid).name()\r\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\r\n            pass\r\n\r\n        service, critical = SERVICE_MAP.get(port, (\"Unknown\", False))\r\n        recommendation = \"Check / Restrict Access\" if critical else \"Monitor\"\r\n\r\n        if critical:  # only critical ports for report\r\n            open_ports.append({\r\n                \"ip\": ip,\r\n                \"local_port\": port,\r\n                \"process_name\": proc_name,\r\n                \"protocol\": proto,\r\n                \"service\": service,\r\n                \"critical\": critical,\r\n                \"recommendation\": recommendation,\r\n            })\r\n\r\n    return open_ports\r\n\r\ndef display_open_ports():\r\n    \"\"\"Print the open ports grouped by IP.\"\"\"\r\n    ports = get_open_ports()\r\n    grouped = {}\r\n    for entry in ports:\r\n        grouped.setdefault(entry[\"ip\"], []).append(entry)\r\n\r\n    for ip, entries in grouped.items():\r\n        print(f\"\\nIP: {ip}\")\r\n        table = [[e[\"local_port\"], e[\"process_name\"], e[\"protocol\"], e[\"service\"],\r\n                  e[\"critical\"], e[\"recommendation\"]] for e in entries]\r\n        print(tabulate(table, headers=[\"LocalPort\", \"ProcessName\", \"Protocol\", \"Service\",\r\n                                       \"Critical\", \"Recommendation\"], tablefmt=\"grid\"))\r\n\r\ndef generate_report(json_output=True):\r\n    hostname = socket.gethostname()\r\n    ports = get_open_ports()\r\n    report = {\r\n        \"hostname\": hostname,\r\n        \"open_ports\": ports,\r\n        \"collected_at\": str(datetime.datetime.now())\r\n    }\r\n\r\n    if json_output:\r\n        filename = f\"{hostname}_open_ports.json\"\r\n        with open(filename, \"w\") as f:\r\n            json.dump(report, f, indent=4)\r\n        print(f\"Open ports report saved to {filename}\")\r\n    else:\r\n        display_open_ports()\r\n\r\n    return report\r\n\r\nif __name__ == \"__main__\":\r\n    generate_report(json_output=False)\r\n","size_bytes":2709},"attached_assets/agent_service_async_1759128566470.py":{"content":"#agent_serivce_async.py\nimport time\nimport datetime\nimport threading\nimport os\nimport json\nimport subprocess\nimport requests\nimport configparser\nimport psycopg2\nimport getpass\nimport platform\nimport socket\nfrom display_agent_data import generate_report\nimport nmap\n\n# ======================\n# Load config\n# ======================\nCONFIG_FILE = os.path.join(os.path.dirname(__file__), \"config.ini\")\nconfig = configparser.ConfigParser()\nconfig.read(CONFIG_FILE)\n\nHEARTBEAT_INTERVAL = config.getint(\"GENERAL\", \"HEARTBEAT_INTERVAL\", fallback=300)\nFULL_REPORT_INTERVAL = config.getint(\"GENERAL\", \"FULL_REPORT_INTERVAL\", fallback=3600)\nFULL_REPORT_FILENAME = config.get(\"GENERAL\", \"FULL_REPORT_FILENAME\", fallback=\"full_system_report.json\")\nAGENT_ID = config.get(\"GENERAL\", \"AGENT_ID\", fallback=\"AGENT001\")\n\n# ITSM URLs are now dynamically constructed using AGENT_ID\nITSM_HEARTBEAT_URL = config.get(\"ITSM\", \"HEARTBEAT_URL\").replace('{AGENT_ID}', AGENT_ID)\nITSM_REPORT_URL = config.get(\"ITSM\", \"FULL_REPORT_URL\").replace('{AGENT_ID}', AGENT_ID)\nITSM_COMMANDS_URL = config.get(\"ITSM\", \"COMMANDS_URL\").replace('{AGENT_ID}', AGENT_ID)\nITSM_RESULTS_URL = config.get(\"ITSM\", \"RESULTS_URL\").replace('{AGENT_ID}', AGENT_ID)\n\n# Use environment variable for database URL (same as the main app)\nDB_URL = os.environ.get(\"DATABASE_URL\", config.get(\"Database\", \"DB_URL\", fallback=\"\"))\n\n# ======================\n# Globals\n# ======================\nLAST_FULL_REPORT = None\nLOCK = threading.Lock()\n\n# ======================\n# PostgreSQL helpers\n# ======================\ndef get_db_connection():\n    return psycopg2.connect(DB_URL, sslmode='require')\n\ndef ensure_agent_registered(conn, agent_id, hostname, os_name, location, username):\n    \"\"\"\n    Ensure the agent row exists in the database and update all fields\n    to reflect current system info.\n    \"\"\"\n    # Ensure no null values for required fields\n    hostname = hostname or socket.gethostname()\n    os_name = os_name or platform.system()\n    location = location or \"Unknown\"\n    username = username or getpass.getuser()\n    \n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            INSERT INTO agents (agent_id, hostname, os, location, last_heartbeat, username)\n            VALUES (%s, %s, %s, %s, NOW(), %s)\n            ON CONFLICT (agent_id)\n            DO UPDATE SET last_heartbeat = EXCLUDED.last_heartbeat,\n                          hostname = EXCLUDED.hostname,\n                          os = EXCLUDED.os,\n                          location = EXCLUDED.location,\n                          username = EXCLUDED.username;\n        \"\"\", (agent_id, hostname, os_name, location, username))\n        conn.commit()\n\ndef insert_heartbeat(agent_id, heartbeat_data):\n    try:\n        conn = get_db_connection()\n        ensure_agent_registered(conn,\n                                agent_id,\n                                heartbeat_data[\"deviceName\"],\n                                heartbeat_data[\"os\"],\n                                heartbeat_data[\"location\"],\n                                heartbeat_data[\"username\"])\n        cur = conn.cursor()\n        cur.execute(\"\"\"\n            INSERT INTO heartbeat_current(agent_id, collected_at, local_ip, public_ip, location)\n            VALUES (%s, NOW(), %s, %s, %s)\n            ON CONFLICT (agent_id)\n            DO UPDATE SET collected_at = NOW(),\n                          local_ip = EXCLUDED.local_ip,\n                          public_ip = EXCLUDED.public_ip,\n                          location = EXCLUDED.location;\n        \"\"\", (agent_id, heartbeat_data.get(\"localIp\"), heartbeat_data.get(\"publicIp\"), heartbeat_data.get(\"location\")))\n        cur.execute(\"\"\"\n            INSERT INTO heartbeat_history(agent_id, collected_at, local_ip, public_ip, location)\n            VALUES (%s, NOW(), %s, %s, %s)\n        \"\"\", (agent_id, heartbeat_data.get(\"localIp\"), heartbeat_data.get(\"publicIp\"), heartbeat_data.get(\"location\")))\n        conn.commit()\n        cur.close()\n        conn.close()\n        print(f\"[Info] Heartbeat data saved to database\")\n    except Exception as e:\n        print(f\"[Warning] Failed to save heartbeat to database: {e}\")\n\ndef insert_full_report(agent_id, report_json):\n    try:\n        conn = get_db_connection()\n        cur = conn.cursor()\n        cur.execute(\"\"\"\n            INSERT INTO agent_reports(agent_id, report_type, report_data, collected_at)\n            VALUES (%s, %s, %s, NOW())\n        \"\"\", (agent_id, \"full_system_report\", json.dumps(report_json)))\n        conn.commit()\n        cur.close()\n        conn.close()\n        print(f\"[Info] Full report saved to database\")\n    except Exception as e:\n        print(f\"[Warning] Failed to save full report to database: {e}\")\n\n# ======================\n# Heartbeat Payload\n# ======================\ndef build_heartbeat_payload():\n    system_info = generate_report(json_output=False)\n    \n    # Extract data from the nested structure returned by generate_report\n    system_data = system_info.get(\"SystemInfo\", {})\n    network_data = system_info.get(\"NetworkInfo\", {})\n    \n    return {\n        \"agentId\": AGENT_ID,\n        \"deviceName\": system_data.get(\"deviceName\", socket.gethostname()),\n        \"username\": getpass.getuser(),\n        \"os\": system_data.get(\"os\", platform.system()),\n        \"edition\": system_data.get(\"edition\", \"Unknown\"),\n        \"cpu\": system_data.get(\"cpu\", \"Unknown\"),\n        \"ram\": system_data.get(\"ram\", \"Unknown\"),\n        \"graphics\": system_data.get(\"graphics\", \"Unknown\"),\n        \"localIp\": network_data.get(\"local_ip\", \"127.0.0.1\"),\n        \"publicIp\": network_data.get(\"public_ip\", \"0.0.0.0\"),\n        \"location\": network_data.get(\"location\", \"Unknown\"),\n        \"collectedAt\": datetime.datetime.utcnow().isoformat()\n    }\n\ndef send_heartbeat():\n    try:\n        heartbeat_data = build_heartbeat_payload()\n        print(f\"[DEBUG] Sending heartbeat to: {ITSM_HEARTBEAT_URL}\")\n        print(f\"[DEBUG] Heartbeat data: {json.dumps(heartbeat_data, indent=2)}\")\n        \n        resp = requests.post(ITSM_HEARTBEAT_URL, json=heartbeat_data, timeout=10)\n        if resp.status_code == 200:\n            print(f\"[Info] Heartbeat sent successfully at {datetime.datetime.now()}\")\n        else:\n            print(f\"[Warning] Heartbeat failed: {resp.status_code}, {resp.text}\")\n        insert_heartbeat(AGENT_ID, heartbeat_data)\n        return True\n    except Exception as e:\n        print(f\"[Error] Heartbeat exception: {e}\")\n        return False\n\n# ======================\n# Full Report\n# ======================\ndef run_full_report():\n    try:\n        subprocess.run([\"python\", \"full_system_report.py\"], check=True)\n        if os.path.exists(FULL_REPORT_FILENAME):\n            return FULL_REPORT_FILENAME\n        else:\n            print(f\"[Error] Full report not found: {FULL_REPORT_FILENAME}\")\n            return None\n    except Exception as e:\n        print(f\"[Error] Running full_system_report.py failed: {e}\")\n        return None\n\ndef push_file_to_itsm(filepath):\n    try:\n        print(f\"[DEBUG] Pushing report to: {ITSM_REPORT_URL}\")\n        with open(filepath, \"rb\") as f:\n            resp = requests.post(ITSM_REPORT_URL, files={\"file\": f}, timeout=15)\n        if resp.status_code == 200:\n            print(f\"[Info] Full report sent successfully at {datetime.datetime.now()}\")\n            return True\n        else:\n            print(f\"[Error] Failed to push report: {resp.status_code}, {resp.text}\")\n            return False\n    except Exception as e:\n        print(f\"[Error] Exception while pushing full report: {e}\")\n        return False\n\ndef full_report_worker():\n    global LAST_FULL_REPORT\n    with LOCK:\n        report_file = run_full_report()\n        if report_file:\n            try:\n                with open(report_file, \"r\") as f:\n                    report_json = json.load(f)\n                insert_full_report(AGENT_ID, report_json)\n            except Exception as e:\n                print(f\"[Error] Saving full report to DB failed: {e}\")\n            push_file_to_itsm(report_file)\n            LAST_FULL_REPORT = time.time()\n\n# ======================\n# Command Polling\n# ======================\ndef poll_commands():\n    try:\n        resp = requests.get(f\"{ITSM_COMMANDS_URL}?agent_id={AGENT_ID}\", timeout=10)\n        if resp.status_code != 200:\n            print(f\"[Warning] Failed to fetch commands: {resp.status_code}\")\n            return\n        if not resp.text.strip():\n            return\n        try:\n            commands = resp.json()\n        except json.JSONDecodeError:\n            print(\"[Warning] Command polling returned non-JSON data\")\n            return\n\n        for cmd in commands:\n            if cmd.get(\"command\") == \"remote_session\":\n                ...\n\n            elif cmd.get(\"command\") == \"network_scan\":\n                target = cmd.get(\"target\", \"127.0.0.1\")\n                ports = cmd.get(\"ports\", \"1-1024\")\n                print(f\"[Info] Starting network scan on {target} ports {ports}\")\n                try:\n                    result = perform_network_scan(target, ports)\n                    status = \"completed\"\n                except Exception as e:\n                    print(f\"[Error] Network scan failed: {e}\")\n                    result = {\"error\": str(e)}\n                    status = \"failed\"\n                payload = {\n                    \"agent_id\": AGENT_ID,\n                    \"command\": \"network_scan\",\n                    \"status\": status,\n                    \"target\": target,\n                    \"ports\": ports,\n                    \"result\": result,\n                    \"timestamp\": str(datetime.datetime.now())\n                }\n                try:\n                    requests.post(ITSM_RESULTS_URL, json=payload, timeout=15)\n                    print(f\"[Info] Network scan results sent to ITSM\")\n                except Exception as e:\n                    print(f\"[Error] Failed to send network scan results: {e}\")\n    except Exception as e:\n        print(f\"[Error] Command polling failed: {e}\")\n\n# ======================\n# Network Scan\n# ======================\ndef perform_network_scan(target=\"127.0.0.1\", ports=\"1-1024\"):\n    nm = nmap.PortScanner()\n    scan_result = {}\n    try:\n        nm.scan(hosts=target, ports=ports, arguments='-sS')\n        for host in nm.all_hosts():\n            scan_result[host] = {}\n            for proto in nm[host].all_protocols():\n                scan_result[host][proto] = []\n                for port in nm[host][proto].keys():\n                    scan_result[host][proto].append({\n                        \"port\": port,\n                        \"state\": nm[host][proto][port][\"state\"],\n                        \"name\": nm[host][proto][port][\"name\"]\n                    })\n    except Exception as e:\n        scan_result[\"error\"] = str(e)\n    return scan_result\n\n# ======================\n# Main Loop\n# ======================\ndef main_loop():\n    global LAST_FULL_REPORT\n    last_command_poll = 0\n    COMMAND_POLL_INTERVAL = 60\n\n    # Ensure agent row is updated immediately on startup\n    try:\n        heartbeat_data = build_heartbeat_payload()\n        conn = get_db_connection()\n        ensure_agent_registered(conn,\n                                AGENT_ID,\n                                heartbeat_data[\"deviceName\"],\n                                heartbeat_data[\"os\"],\n                                heartbeat_data[\"location\"],\n                                heartbeat_data[\"username\"])\n        conn.close()\n    except Exception as e:\n        print(f\"[Error] Initial agent registration failed: {e}\")\n\n    while True:\n        heartbeat_ok = send_heartbeat()\n        now = time.time()\n\n        if heartbeat_ok:\n            with LOCK:\n                if LAST_FULL_REPORT is None or (now - LAST_FULL_REPORT) >= FULL_REPORT_INTERVAL:\n                    threading.Thread(target=full_report_worker, daemon=True).start()\n\n        if now - last_command_poll >= COMMAND_POLL_INTERVAL:\n            poll_commands()\n            last_command_poll = now\n\n        time.sleep(HEARTBEAT_INTERVAL)\n\nif __name__ == \"__main__\":\n    print(\"[Info] Starting ITSMAgent service...\")\n    main_loop()","size_bytes":12065},"attached_assets/display_agent_data_1759128566474.py":{"content":"# display_agent_data.py\r\nimport platform\r\nimport psutil\r\nimport requests\r\nfrom tabulate import tabulate\r\nimport datetime\r\nimport socket\r\nimport wmi\r\nimport json\r\nimport os\r\n\r\n# --- System Info ---\r\ndef get_system_info():\r\n    SKU_MAP = {\r\n        48: \"Home\",\r\n        100: \"Home Single Language\",\r\n        101: \"Pro\",\r\n        103: \"Pro Education\",\r\n        121: \"Education\",\r\n        123: \"Enterprise\",\r\n    }\r\n\r\n    c = wmi.WMI()\r\n    os_info = c.Win32_OperatingSystem()[0]\r\n    computer = c.Win32_ComputerSystem()[0]\r\n    cpu = c.Win32_Processor()[0]\r\n\r\n    gpus = [gpu.Name for gpu in c.Win32_VideoController()]\r\n\r\n    total_disk = sum([int(d.Size) for d in c.Win32_LogicalDisk() if d.Size])\r\n    total_disk_gb = round(total_disk / (1024**3), 2)\r\n\r\n    info = {\r\n        \"Device Name\": computer.Name,\r\n        \"OS\": f\"{os_info.Caption} ({os_info.Version})\",\r\n        \"Edition\": SKU_MAP.get(os_info.OperatingSystemSKU, f\"Unknown ({os_info.OperatingSystemSKU})\"),\r\n        \"CPU\": f\"{cpu.Name} ({cpu.NumberOfCores} cores / {cpu.NumberOfLogicalProcessors} threads, {cpu.MaxClockSpeed} MHz)\",\r\n        \"RAM\": f\"{round(int(computer.TotalPhysicalMemory) / (1024**3), 2)} GB\",\r\n        \"Graphics\": \", \".join(gpus) if gpus else \"Unknown\",\r\n        \"Users\": \", \".join([u.name for u in psutil.users()]),\r\n        \"Total Disk\": f\"{total_disk_gb} GB\"\r\n    }\r\n\r\n    return info\r\n\r\n# --- Disk Info ---\r\ndef get_disk_info():\r\n    disk_info = []\r\n    for partition in psutil.disk_partitions():\r\n        try:\r\n            usage = psutil.disk_usage(partition.mountpoint)\r\n            disk_info.append({\r\n                \"Device\": partition.device,\r\n                \"Mountpoint\": partition.mountpoint,\r\n                \"FileSystem\": partition.fstype,\r\n                \"Total\": f\"{usage.total / (1024**3):.2f} GB\",\r\n                \"Used\": f\"{usage.used / (1024**3):.2f} GB\",\r\n                \"Free\": f\"{usage.free / (1024**3):.2f} GB\",\r\n                \"Usage %\": f\"{usage.percent} %\"\r\n            })\r\n        except PermissionError:\r\n            continue\r\n    return disk_info\r\n\r\n# --- Network Info ---\r\ndef get_local_ipv4():\r\n    try:\r\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n        s.connect((\"8.8.8.8\", 80))\r\n        ip = s.getsockname()[0]\r\n        s.close()\r\n        return ip\r\n    except:\r\n        return \"Unknown\"\r\n\r\ndef get_public_ip_info():\r\n    headers = {\"User-Agent\": \"Mozilla/5.0\"}\r\n    try:\r\n        geo = requests.get(\"https://ipwhois.app/json/\", headers=headers, timeout=5).json()\r\n        public_ip = geo.get(\"ip\", \"Unknown\")\r\n        city = geo.get(\"city\", \"\")\r\n        region = geo.get(\"region\", \"\")\r\n        country = geo.get(\"country\", \"\")\r\n        flag_img = geo.get(\"flag\", {}).get(\"img\", \"\")\r\n        flag_emoji = geo.get(\"flag\", {}).get(\"emoji\", \"\")\r\n        location = f\"{city} - {region} - {country} {flag_emoji}\"\r\n        return public_ip, location, flag_img\r\n    except Exception as e:\r\n        print(f\"[Warning] Could not fetch public IP / location: {e}\")\r\n        return \"Unknown\", \"Unknown\", \"\"\r\n\r\ndef get_nic_info():\r\n    c = wmi.WMI()\r\n    nic_info = []\r\n    for nic in c.Win32_NetworkAdapterConfiguration(IPEnabled=True):\r\n        mac = nic.MACAddress if nic.MACAddress else \"Unknown\"\r\n        conn_type = \"Wi-Fi\" if \"Wireless\" in (nic.Description or \"\") else \"LAN\"\r\n        ip_addresses = \", \".join(nic.IPAddress) if nic.IPAddress else \"Unknown\"\r\n        nic_info.append({\r\n            \"Description\": nic.Description,\r\n            \"MAC\": mac,\r\n            \"ConnectionType\": conn_type,\r\n            \"IP Addresses\": ip_addresses\r\n        })\r\n    return nic_info\r\n\r\ndef get_network_info():\r\n    local_ip = get_local_ipv4()\r\n    public_ip, location, flag_img = get_public_ip_info()\r\n    nic_details = get_nic_info()\r\n    return {\r\n        \"Local IP\": local_ip,\r\n        \"Public IP\": public_ip,\r\n        \"Location\": location,\r\n        \"Flag URL\": flag_img,\r\n        \"NIC Details\": nic_details\r\n    }\r\n\r\n# --- USB Info ---\r\ndef get_usb_storage_devices():\r\n    c = wmi.WMI()\r\n    devices = []\r\n    for disk in c.Win32_DiskDrive(InterfaceType=\"USB\"):\r\n        device_info = {\r\n            \"DeviceID\": disk.DeviceID,\r\n            \"Model\": disk.Model,\r\n            \"SizeGB\": round(int(disk.Size) / (1024**3), 2) if disk.Size else \"N/A\",\r\n            \"Status\": disk.Status\r\n        }\r\n        devices.append(device_info)\r\n    return devices\r\n\r\n# --- Display Data ---\r\ndef display_data():\r\n    system_info = get_system_info()\r\n    network_info = get_network_info()\r\n    disk_info = get_disk_info()\r\n    usb_devices = get_usb_storage_devices()\r\n\r\n    # System Info Table\r\n    sys_table = [[k, v] for k, v in system_info.items()]\r\n    print(\"=== System Info ===\")\r\n    print(tabulate(sys_table, headers=[\"Property\", \"Value\"], tablefmt=\"grid\"))\r\n    print()\r\n\r\n    # Network Info Table\r\n    net_table = [[k, v] for k, v in network_info.items() if k != \"NIC Details\"]\r\n    print(\"=== Network Info ===\")\r\n    print(tabulate(net_table, headers=[\"Property\", \"Value\"], tablefmt=\"grid\"))\r\n    print()\r\n\r\n    # NIC Details Table\r\n    nic_list = network_info.get(\"NIC Details\", [])\r\n    if nic_list:\r\n        nic_table = [[d[\"Description\"], d[\"MAC\"], d[\"ConnectionType\"], d[\"IP Addresses\"]] for d in nic_list]\r\n        print(\"=== NIC Details ===\")\r\n        print(tabulate(nic_table, headers=[\"Description\", \"MAC\", \"Connection Type\", \"IP Addresses\"], tablefmt=\"grid\"))\r\n        print()\r\n\r\n    # Disk Info Table\r\n    if disk_info:\r\n        disk_table = [[d[\"Device\"], d[\"Mountpoint\"], d[\"FileSystem\"], d[\"Total\"], d[\"Used\"], d[\"Free\"], d[\"Usage %\"]] for d in disk_info]\r\n        print(\"=== Disk Partitions & Usage ===\")\r\n        print(tabulate(disk_table, headers=[\"Device\", \"Mountpoint\", \"FS\", \"Total\", \"Used\", \"Free\", \"Usage %\"], tablefmt=\"grid\"))\r\n        print()\r\n    else:\r\n        print(\"=== Disk Partitions & Usage ===\")\r\n        print(\"No disk partitions found.\\n\")\r\n\r\n    # USB Info Table\r\n    if usb_devices:\r\n        usb_table = [[d[\"DeviceID\"], d[\"Model\"], d[\"SizeGB\"], d[\"Status\"]] for d in usb_devices]\r\n        print(\"=== USB Storage Devices ===\")\r\n        print(tabulate(usb_table, headers=[\"DeviceID\", \"Model\", \"Size (GB)\", \"Status\"], tablefmt=\"grid\"))\r\n        print()\r\n    else:\r\n        print(\"=== USB Storage Devices ===\")\r\n        print(\"No USB storage devices found.\\n\")\r\n\r\n# --- Generate Report ---\r\ndef generate_report(json_output=True):\r\n    system_info_raw = get_system_info()\r\n    network_info_raw = get_network_info()\r\n    disk_info = get_disk_info()\r\n    usb_devices = get_usb_storage_devices()\r\n\r\n    # Normalize keys\r\n    system_info = {\r\n        \"deviceName\": system_info_raw.get(\"Device Name\"),\r\n        \"os\": system_info_raw.get(\"OS\"),\r\n        \"edition\": system_info_raw.get(\"Edition\"),\r\n        \"cpu\": system_info_raw.get(\"CPU\"),\r\n        \"ram\": system_info_raw.get(\"RAM\"),\r\n        \"graphics\": system_info_raw.get(\"Graphics\"),\r\n        \"users\": system_info_raw.get(\"Users\"),\r\n        \"total_disk\": system_info_raw.get(\"Total Disk\")\r\n    }\r\n\r\n    network_info = {\r\n        \"local_ip\": network_info_raw.get(\"Local IP\"),\r\n        \"public_ip\": network_info_raw.get(\"Public IP\"),\r\n        \"location\": network_info_raw.get(\"Location\"),\r\n        \"flag_url\": network_info_raw.get(\"Flag URL\"),\r\n        \"nic_details\": network_info_raw.get(\"NIC Details\")\r\n    }\r\n\r\n    report = {\r\n        \"SystemInfo\": system_info,\r\n        \"NetworkInfo\": network_info,\r\n        \"DiskInfo\": disk_info,\r\n        \"USBDevices\": usb_devices,\r\n        \"CollectedAt\": str(datetime.datetime.now())\r\n    }\r\n\r\n    if json_output:\r\n        hostname = system_info.get(\"deviceName\", \"agent_report\")\r\n        filename = f\"{hostname}.json\"\r\n        with open(filename, \"w\") as f:\r\n            json.dump(report, f, indent=4)\r\n        print(f\"System info report saved to {filename}\")\r\n    else:\r\n        display_data()\r\n\r\n    return report\r\n\r\nif __name__ == \"__main__\":\r\n    display_data()\r\n","size_bytes":7906},"attached_assets/display_top_processes_1759128566473.py":{"content":"# display_top_processes.py\r\nimport psutil\r\nimport time\r\nfrom tabulate import tabulate\r\nimport json\r\nimport datetime\r\nimport socket\r\n\r\n# --- Top Processes ---\r\ndef get_top_processes(n=10):\r\n    processes = []\r\n\r\n    # Initialize CPU counters\r\n    for proc in psutil.process_iter(['pid', 'name']):\r\n        try:\r\n            proc.cpu_percent(interval=None)\r\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\r\n            continue\r\n\r\n    time.sleep(1)  # measure actual CPU usage\r\n\r\n    # Collect process info\r\n    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'memory_info']):\r\n        try:\r\n            name = proc.info['name'] or \"Unknown\"\r\n            if not name.strip():\r\n                continue\r\n\r\n            mem_mb = proc.info['memory_info'].rss / (1024 * 1024)  # MB\r\n            processes.append({\r\n                'pid': proc.info['pid'],\r\n                'name': name,\r\n                'cpu_percent': proc.info['cpu_percent'],\r\n                'memory_percent': proc.info['memory_percent'],\r\n                'memory_mb': mem_mb\r\n            })\r\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\r\n            continue\r\n\r\n    # Top N by CPU and memory\r\n    top_cpu = sorted(processes, key=lambda x: (-x['cpu_percent'], x['pid']))[:n]\r\n    top_mem = sorted(processes, key=lambda x: (-x['memory_percent'], x['pid']))[:n]\r\n\r\n    return top_cpu, top_mem\r\n\r\ndef generate_report(n=10, json_output=True):\r\n    hostname = socket.gethostname()\r\n    top_cpu, top_mem = get_top_processes(n)\r\n\r\n    report = {\r\n        \"hostname\": hostname,\r\n        \"top_cpu\": top_cpu,\r\n        \"top_memory\": top_mem,\r\n        \"collected_at\": str(datetime.datetime.now())\r\n    }\r\n\r\n    if json_output:\r\n        filename = f\"{hostname}_top_processes.json\"\r\n        with open(filename, \"w\") as f:\r\n            json.dump(report, f, indent=4)\r\n        print(f\"Top processes report saved to {filename}\")\r\n    else:\r\n        total_ram_gb = psutil.virtual_memory().total / (1024**3)\r\n        system_cpu = psutil.cpu_percent(interval=1)\r\n        system_mem = psutil.virtual_memory().percent\r\n        cpu_cores = psutil.cpu_count(logical=True)\r\n\r\n        # --- Top CPU Table ---\r\n        cpu_table = [[p['pid'], p['name'], f\"{p['cpu_percent']:.2f} %\"] for p in top_cpu]\r\n        print(f\"=== Top {n} Processes by CPU Usage ({cpu_cores} logical cores) ===\")\r\n        print(tabulate(cpu_table, headers=[\"PID\", \"Name\", \"CPU %\"], tablefmt=\"grid\"))\r\n        print(f\"System-wide CPU Usage: {system_cpu:.2f} %\\n\")\r\n\r\n        # --- Top Memory Table ---\r\n        mem_table = [[p['pid'], p['name'], f\"{p['memory_mb']:.2f} MB\", f\"{p['memory_percent']:.2f} %\"] for p in top_mem]\r\n        print(f\"=== Top {n} Processes by Memory Usage (Total RAM: {total_ram_gb:.2f} GB) ===\")\r\n        print(tabulate(mem_table, headers=[\"PID\", \"Name\", \"Memory (MB)\", \"Memory %\"], tablefmt=\"grid\"))\r\n        print(f\"System-wide Memory Usage: {system_mem:.2f} %\\n\")\r\n\r\n    return report\r\n\r\nif __name__ == \"__main__\":\r\n    generate_report(json_output=False, n=10)\r\n","size_bytes":3058},"attached_assets/full_system_report_1759128566471.py":{"content":"# full_system_report.py\r\nimport os\r\nimport json\r\nfrom datetime import datetime\r\nimport configparser\r\nimport display_agent_data\r\nimport display_top_processes\r\nimport list_installed_apps\r\nimport windows_security_overview\r\nimport Display_agent_open_ports\r\nimport socket\r\n\r\n# ======================\r\n# Load config\r\n# ======================\r\nCONFIG_FILE = os.path.join(os.path.dirname(__file__), \"config.ini\")\r\nconfig = configparser.ConfigParser()\r\nconfig.read(CONFIG_FILE)\r\nREPORT_FILE = config.get(\"GENERAL\", \"FULL_REPORT_FILENAME\", fallback=\"full_system_report.json\")\r\n\r\ndef main():\r\n    hostname = socket.gethostname()\r\n    print(f\"\\n=== Running Full System Agent Report for {hostname} ===\\n\")\r\n\r\n    final_report = {\r\n        \"hostname\": hostname,\r\n        \"collected_at\": str(datetime.now())\r\n    }\r\n\r\n    # [1] Full System Info\r\n    print(\"[1] Full System Info (Agent + Disk + Network + USB)\")\r\n    final_report[\"system_info\"] = display_agent_data.generate_report(json_output=False)\r\n\r\n    # [2] Top Processes\r\n    print(\"\\n[2] Top Processes\")\r\n    final_report[\"top_processes\"] = display_top_processes.generate_report(json_output=False)\r\n\r\n    # [3] Installed Applications\r\n    print(\"\\n[3] Installed Applications\")\r\n    final_report[\"installed_apps\"] = list_installed_apps.generate_report(json_output=False)\r\n\r\n    # [4] Windows Security Overview\r\n    print(\"\\n[4] Windows Security Overview\")\r\n    final_report[\"windows_security\"] = windows_security_overview.generate_report(json_output=False)\r\n\r\n    # [5] Open Ports Overview\r\n    print(\"\\n[5] Open Ports Overview\")\r\n    final_report[\"open_ports\"] = Display_agent_open_ports.generate_report(json_output=False)\r\n\r\n    # Remove previous report if exists\r\n    if os.path.exists(REPORT_FILE):\r\n        os.remove(REPORT_FILE)\r\n\r\n    # Save the latest report\r\n    with open(REPORT_FILE, \"w\") as f:\r\n        json.dump(final_report, f, indent=4)\r\n\r\n    print(f\"\\n✅ Latest full system report saved to {REPORT_FILE}\")\r\n    return final_report\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","size_bytes":2033},"attached_assets/list_installed_apps_1759128566473.py":{"content":"# list_installed_apps.py\r\nimport winreg\r\nfrom tabulate import tabulate\r\nimport json\r\nimport datetime\r\nimport socket\r\n\r\ndef enum_installed_apps():\r\n    uninstall_keys = [\r\n        (winreg.HKEY_CURRENT_USER, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"),\r\n        (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"),\r\n        (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\")\r\n    ]\r\n\r\n    apps = []\r\n\r\n    for root, key_path in uninstall_keys:\r\n        try:\r\n            reg_key = winreg.OpenKey(root, key_path)\r\n        except FileNotFoundError:\r\n            continue\r\n\r\n        for i in range(winreg.QueryInfoKey(reg_key)[0]):\r\n            try:\r\n                sub_key_name = winreg.EnumKey(reg_key, i)\r\n                sub_key = winreg.OpenKey(reg_key, sub_key_name)\r\n                name, version, publisher, install_loc = None, None, None, None\r\n\r\n                try:\r\n                    name = winreg.QueryValueEx(sub_key, \"DisplayName\")[0]\r\n                except FileNotFoundError:\r\n                    continue\r\n\r\n                try:\r\n                    publisher = winreg.QueryValueEx(sub_key, \"Publisher\")[0]\r\n                except FileNotFoundError:\r\n                    publisher = \"Unknown\"\r\n\r\n                system_publishers = [\"Microsoft Corporation\", \"Windows\", \"Microsoft\"]\r\n                if any(pub in publisher for pub in system_publishers):\r\n                    continue\r\n\r\n                try:\r\n                    version = winreg.QueryValueEx(sub_key, \"DisplayVersion\")[0]\r\n                except FileNotFoundError:\r\n                    version = \"Unknown\"\r\n\r\n                try:\r\n                    install_loc = winreg.QueryValueEx(sub_key, \"InstallLocation\")[0] or \"Unknown\"\r\n                except FileNotFoundError:\r\n                    install_loc = \"Unknown\"\r\n\r\n                apps.append({\r\n                    \"name\": name,\r\n                    \"version\": version,\r\n                    \"publisher\": publisher,\r\n                    \"install_location\": install_loc\r\n                })\r\n\r\n            except EnvironmentError:\r\n                continue\r\n\r\n    return apps\r\n\r\ndef generate_report(json_output=True):\r\n    apps = enum_installed_apps()\r\n    hostname = socket.gethostname()\r\n    report = {\r\n        \"hostname\": hostname,\r\n        \"installed_apps\": apps,\r\n        \"collected_at\": str(datetime.datetime.now())\r\n    }\r\n\r\n    if json_output:\r\n        filename = f\"{hostname}_installed_apps.json\"\r\n        with open(filename, \"w\") as f:\r\n            json.dump(report, f, indent=4)\r\n        print(f\"Installed applications report saved to {filename}\")\r\n    else:\r\n        print(f\"=== Installed Applications (User + Non-System, {len(apps)} apps) ===\")\r\n        table = [[a[\"name\"], a[\"version\"], a[\"publisher\"], a[\"install_location\"]] for a in apps]\r\n        print(tabulate(table, headers=[\"Name\", \"Version\", \"Publisher\", \"Install Location\"], tablefmt=\"grid\"))\r\n\r\n    return report\r\n\r\nif __name__ == \"__main__\":\r\n    generate_report(json_output=False)\r\n\r\n","size_bytes":3087},"attached_assets/windows_security_overview_1759128566472.py":{"content":"# windows_security_overview.py\r\nimport subprocess\r\nimport json\r\nfrom datetime import datetime\r\nfrom tabulate import tabulate\r\nimport socket\r\n\r\n# --- Helper to run PowerShell commands ---\r\ndef run_powershell(cmd):\r\n    completed = subprocess.run([\"powershell\", \"-Command\", cmd], capture_output=True, text=True)\r\n    return completed.stdout.strip(), completed.returncode\r\n\r\n# --- Windows Defender Status ---\r\ndef get_defender_status():\r\n    status = {\r\n        \"antivirus_enabled\": False,\r\n        \"real_time_protection\": False,\r\n        \"am_service_running\": False,\r\n        \"last_quick_scan_days_ago\": \"N/A\"\r\n    }\r\n    try:\r\n        cmd = 'Get-MpComputerStatus | Select-Object AntivirusEnabled,RealTimeProtectionEnabled,AMServiceEnabled,QuickScanEndTime | ConvertTo-Json'\r\n        output, code = run_powershell(cmd)\r\n        if code == 0 and output:\r\n            data = json.loads(output)\r\n            status[\"antivirus_enabled\"] = data.get(\"AntivirusEnabled\", False)\r\n            status[\"real_time_protection\"] = data.get(\"RealTimeProtectionEnabled\", False)\r\n            status[\"am_service_running\"] = data.get(\"AMServiceEnabled\", False)\r\n            qst = data.get(\"QuickScanEndTime\")\r\n            if qst:\r\n                last_scan = datetime.strptime(qst, \"%m/%d/%Y %I:%M:%S %p\")\r\n                status[\"last_quick_scan_days_ago\"] = (datetime.now() - last_scan).days\r\n    except Exception:\r\n        pass\r\n    return status\r\n\r\n# --- Firewall Status ---\r\ndef get_firewall_status():\r\n    profiles = []\r\n    try:\r\n        cmd = 'Get-NetFirewallProfile | Select-Object Name,Enabled | ConvertTo-Json'\r\n        output, code = run_powershell(cmd)\r\n        if code == 0 and output:\r\n            data = json.loads(output)\r\n            if isinstance(data, dict):\r\n                data = [data]\r\n            for profile in data:\r\n                profiles.append({\r\n                    \"profile\": profile.get(\"Name\", \"Unknown\"),\r\n                    \"enabled\": bool(profile.get(\"Enabled\", 0))\r\n                })\r\n    except Exception:\r\n        pass\r\n    return profiles\r\n\r\n# --- User Account Control ---\r\ndef get_uac_status():\r\n    status = \"Disabled\"\r\n    try:\r\n        cmd = '(Get-ItemProperty -Path \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\" -Name EnableLUA).EnableLUA'\r\n        output, code = run_powershell(cmd)\r\n        if code == 0:\r\n            status = \"Enabled\" if output.strip() == \"1\" else \"Disabled\"\r\n    except Exception:\r\n        pass\r\n    return status\r\n\r\n# --- Installed Antivirus Products ---\r\ndef get_installed_av():\r\n    avs = []\r\n    try:\r\n        cmd = 'Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct | Select-Object displayName,productState | ConvertTo-Json'\r\n        output, code = run_powershell(cmd)\r\n        if code == 0 and output:\r\n            data = json.loads(output)\r\n            if isinstance(data, dict):\r\n                data = [data]\r\n            for av in data:\r\n                state_val = av.get(\"productState\", 0)\r\n                state = \"Enabled\" if state_val else \"Disabled\"\r\n                avs.append({\"name\": av.get(\"displayName\", \"Unknown\"), \"state\": state})\r\n    except Exception:\r\n        pass\r\n    return avs\r\n\r\n# --- Security Center Health ---\r\ndef get_security_center_health():\r\n    try:\r\n        cmd = 'Get-CimInstance -Namespace root/SecurityCenter2 -ClassName SecurityHealth | ConvertTo-Json'\r\n        output, code = run_powershell(cmd)\r\n        if code == 0 and output:\r\n            return json.loads(output)\r\n    except Exception:\r\n        pass\r\n    return \"Not available\"\r\n\r\n# --- Restart Pending ---\r\ndef is_restart_pending():\r\n    try:\r\n        cmd = '(Get-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WindowsUpdate\\\\Auto Update\\\\RebootRequired\" -ErrorAction SilentlyContinue).PSChildName'\r\n        output, code = run_powershell(cmd)\r\n        return bool(output.strip())\r\n    except:\r\n        return False\r\n\r\n# --- Recent Installed Windows Updates / Patches ---\r\ndef get_recent_patches(limit=10):\r\n    patches = []\r\n    try:\r\n        cmd = f'Get-HotFix | Sort-Object InstalledOn -Descending | Select-Object HotFixID,InstalledOn | ConvertTo-Json -Depth 3'\r\n        output, code = run_powershell(cmd)\r\n        if code == 0 and output:\r\n            data = json.loads(output)\r\n            if isinstance(data, dict):\r\n                data = [data]\r\n            for patch in data[:limit]:\r\n                inst_on = patch.get(\"InstalledOn\")\r\n                if isinstance(inst_on, dict):\r\n                    inst_on = inst_on.get(\"DateTime\", str(inst_on))\r\n                patches.append({\r\n                    \"hotfix_id\": patch.get(\"HotFixID\", \"Unknown\"),\r\n                    \"installed_on\": inst_on\r\n                })\r\n    except Exception:\r\n        pass\r\n    return patches\r\n\r\n# --- Generate full report ---\r\ndef generate_report(json_output=True):\r\n    hostname = socket.gethostname()\r\n    report = {\r\n        \"hostname\": hostname,\r\n        \"windows_defender\": get_defender_status(),\r\n        \"firewall\": get_firewall_status(),\r\n        \"uac_status\": get_uac_status(),\r\n        \"installed_av\": get_installed_av(),\r\n        \"security_center_health\": get_security_center_health(),\r\n        \"recent_patches\": get_recent_patches(10),\r\n        \"restart_pending\": is_restart_pending(),\r\n        \"collected_at\": str(datetime.now())\r\n    }\r\n\r\n    if json_output:\r\n        filename = f\"{hostname}_windows_security.json\"\r\n        with open(filename, \"w\") as f:\r\n            json.dump(report, f, indent=4)\r\n        print(f\"Windows security report saved to {filename}\")\r\n    else:\r\n        print(json.dumps(report, indent=4))\r\n\r\n    return report\r\n\r\n# --- Run standalone ---\r\nif __name__ == \"__main__\":\r\n    generate_report(json_output=False)\r\n","size_bytes":5767},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Agent heartbeat endpoint\n  app.post(\"/api/agents/:agentId/heartbeat\", async (req, res) => {\n    try {\n      const { agentId } = req.params;\n      const heartbeatData = req.body;\n\n      console.log(`[DEBUG] Received heartbeat from agent ${agentId}:`, JSON.stringify(heartbeatData, null, 2));\n\n      // Create or update agent\n      await storage.createOrUpdateAgent({\n        agentId,\n        hostname: heartbeatData.deviceName || heartbeatData.hostname,\n        os: heartbeatData.os,\n        location: heartbeatData.location,\n        username: heartbeatData.username,\n        lastHeartbeat: new Date(),\n        status: \"online\"\n      });\n\n      // Insert heartbeat data\n      await storage.insertHeartbeat({\n        agentId,\n        collectedAt: new Date(),\n        localIp: heartbeatData.localIp,\n        publicIp: heartbeatData.publicIp,\n        location: heartbeatData.location\n      });\n\n      // Store system information from heartbeat as a report (if available)\n      if (heartbeatData.cpu || heartbeatData.ram || heartbeatData.graphics) {\n        console.log(`[DEBUG] Creating system_info_heartbeat report for agent ${agentId}`);\n        const systemInfoReport = {\n          system_info: {\n            SystemInfo: {\n              cpu: heartbeatData.cpu || \"Unknown\",\n              ram: heartbeatData.ram || \"Unknown\", \n              graphics: heartbeatData.graphics || \"Unknown\",\n              total_disk: \"Information available in full system report\"\n            },\n            NetworkInfo: {\n              local_ip: heartbeatData.localIp || \"Unknown\",\n              public_ip: heartbeatData.publicIp || \"Unknown\",\n              location: heartbeatData.location || \"Unknown\",\n              nic_details: []\n            }\n          },\n          source: \"heartbeat\",\n          timestamp: new Date().toISOString()\n        };\n\n        try {\n          await storage.insertReport({\n            agentId,\n            reportType: \"system_info_heartbeat\",\n            reportData: systemInfoReport,\n            collectedAt: new Date()\n          });\n          console.log(`[DEBUG] Successfully stored system_info_heartbeat report for agent ${agentId}`);\n        } catch (reportError) {\n          console.error(`[ERROR] Failed to store system_info_heartbeat report for agent ${agentId}:`, reportError);\n        }\n      } else {\n        console.log(`[DEBUG] No system info found in heartbeat from agent ${agentId}`);\n      }\n\n      res.json({ success: true, message: \"Heartbeat received\" });\n    } catch (error) {\n      console.error(\"Error processing heartbeat:\", error);\n      res.status(500).json({ error: \"Failed to process heartbeat\" });\n    }\n  });\n\n  // Agent full report endpoint\n  app.post(\"/api/agents/:agentId/report\", async (req, res) => {\n    try {\n      const { agentId } = req.params;\n      const reportData = req.body;\n\n      console.log(`[DEBUG] Received report from agent ${agentId}`);\n\n      await storage.insertReport({\n        agentId,\n        reportType: \"full_system_report\",\n        reportData,\n        collectedAt: new Date()\n      });\n\n      res.json({ success: true, message: \"Report received\" });\n    } catch (error) {\n      console.error(\"Error processing report:\", error);\n      res.status(500).json({ error: \"Failed to process report\" });\n    }\n  });\n\n  // Get all agents\n  app.get(\"/api/agents\", async (req, res) => {\n    try {\n      const agents = await storage.getAllAgents();\n\n      // Calculate status based on last heartbeat\n      const agentsWithStatus = agents.map(agent => {\n        const lastHeartbeat = new Date(agent.lastHeartbeat);\n        const now = new Date();\n        const timeDiff = now.getTime() - lastHeartbeat.getTime();\n        const minutesDiff = timeDiff / (1000 * 60);\n\n        let status: \"online\" | \"warning\" | \"offline\";\n        if (minutesDiff <= 10) {\n          status = \"online\";\n        } else if (minutesDiff <= 30) {\n          status = \"warning\";\n        } else {\n          status = \"offline\";\n        }\n\n        return {\n          ...agent,\n          status\n        };\n      });\n\n      res.json(agentsWithStatus);\n    } catch (error) {\n      console.error(\"Error fetching agents:\", error);\n      res.status(500).json({ error: \"Failed to fetch agents\" });\n    }\n  });\n\n  // Get specific agent with latest report\n  app.get(\"/api/agents/:agentId\", async (req, res) => {\n    try {\n      const { agentId } = req.params;\n\n      const agent = await storage.getAgent(agentId);\n      if (!agent) {\n        return res.status(404).json({ error: \"Agent not found\" });\n      }\n\n      // Use same fallback logic as latest-report endpoint\n      let latestReportData = null;\n      \n      // First try full system report\n      const fullReport = await storage.getLatestReport(agentId, \"full_system_report\");\n      \n      if (fullReport && fullReport.reportData && Object.keys(fullReport.reportData).length > 0) {\n        latestReportData = fullReport.reportData;\n      } else {\n        // Fall back to heartbeat-based system info\n        const heartbeatReport = await storage.getLatestReport(agentId, \"system_info_heartbeat\");\n        if (heartbeatReport && heartbeatReport.reportData) {\n          latestReportData = heartbeatReport.reportData;\n        }\n      }\n\n      const heartbeat = await storage.getLatestHeartbeat(agentId);\n\n      res.json({\n        ...agent,\n        latestReport: latestReportData,\n        heartbeat\n      });\n    } catch (error) {\n      console.error(\"Error fetching agent:\", error);\n      res.status(500).json({ error: \"Failed to fetch agent\" });\n    }\n  });\n\n  // Get commands for a specific agent\n  app.get('/api/agents/:agentId/commands', (req, res) => {\n    const { agentId } = req.params;\n\n    // For now, return empty commands array\n    // In the future, this could return pending commands from a queue\n    res.json({ commands: [] });\n  });\n\n  // Get latest report for a specific agent\n  app.get('/api/agents/:agentId/latest-report', async (req, res) => {\n    try {\n      const { agentId } = req.params;\n      console.log(`[DEBUG] Fetching latest report for agent ${agentId}`);\n\n      // First try to get full system report\n      const fullReport = await storage.getLatestReport(agentId, \"full_system_report\");\n      console.log(`[DEBUG] Full system report found:`, !!fullReport);\n      console.log(`[DEBUG] Full system report data:`, fullReport?.reportData ? Object.keys(fullReport.reportData).length : 'null/undefined');\n\n      if (fullReport && fullReport.reportData && Object.keys(fullReport.reportData).length > 0) {\n        console.log(`[DEBUG] Returning full system report for agent ${agentId}`);\n        return res.json(fullReport.reportData);\n      }\n\n      // If no full report, try to get system info from heartbeat report\n      const heartbeatReport = await storage.getLatestReport(agentId, \"system_info_heartbeat\");\n      console.log(`[DEBUG] Heartbeat system report found:`, !!heartbeatReport);\n      \n      if (heartbeatReport && heartbeatReport.reportData) {\n        console.log(`[DEBUG] Returning heartbeat system report for agent ${agentId}`);\n        return res.json(heartbeatReport.reportData);\n      }\n\n      // If no reports at all, return empty response\n      console.log(`[DEBUG] No reports found for agent ${agentId}`);\n      return res.status(404).json({ error: 'No system information available for this agent' });\n    } catch (error) {\n      console.error('Error fetching latest report:', error);\n      res.status(500).json({ error: 'Failed to fetch latest report' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":7749},"server/storage.ts":{"content":"\nimport { type User, type InsertUser, type Agent, type InsertAgent, type HeartbeatCurrent, type InsertHeartbeat, type AgentReport, type InsertReport } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { users, agents, heartbeatCurrent, heartbeatHistory, agentReports } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Agent methods\n  getAllAgents(): Promise<Agent[]>;\n  getAgent(agentId: string): Promise<Agent | undefined>;\n  createOrUpdateAgent(agent: InsertAgent): Promise<Agent>;\n  updateAgentStatus(agentId: string, status: string): Promise<void>;\n  \n  // Heartbeat methods\n  insertHeartbeat(heartbeat: InsertHeartbeat): Promise<void>;\n  getLatestHeartbeat(agentId: string): Promise<HeartbeatCurrent | undefined>;\n  \n  // Report methods\n  insertReport(report: InsertReport): Promise<void>;\n  getLatestReport(agentId: string, reportType: string): Promise<AgentReport | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: (users, { eq }) => eq(users.id, id)\n    });\n    return result;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: (users, { eq }) => eq(users.username, username)\n    });\n    return result;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Agent methods\n  async getAllAgents(): Promise<Agent[]> {\n    return await db.select().from(agents).orderBy(desc(agents.lastHeartbeat));\n  }\n\n  async getAgent(agentId: string): Promise<Agent | undefined> {\n    const result = await db.query.agents.findFirst({\n      where: eq(agents.agentId, agentId)\n    });\n    return result;\n  }\n\n  async createOrUpdateAgent(agent: InsertAgent): Promise<Agent> {\n    const [result] = await db.insert(agents)\n      .values(agent)\n      .onConflictDoUpdate({\n        target: agents.agentId,\n        set: {\n          hostname: agent.hostname,\n          os: agent.os,\n          location: agent.location,\n          username: agent.username,\n          lastHeartbeat: agent.lastHeartbeat,\n          status: agent.status || \"online\"\n        }\n      })\n      .returning();\n    return result;\n  }\n\n  async updateAgentStatus(agentId: string, status: string): Promise<void> {\n    await db.update(agents)\n      .set({ status })\n      .where(eq(agents.agentId, agentId));\n  }\n\n  // Heartbeat methods\n  async insertHeartbeat(heartbeat: InsertHeartbeat): Promise<void> {\n    // Insert into current heartbeat (upsert)\n    await db.insert(heartbeatCurrent)\n      .values(heartbeat)\n      .onConflictDoUpdate({\n        target: heartbeatCurrent.agentId,\n        set: {\n          collectedAt: heartbeat.collectedAt,\n          localIp: heartbeat.localIp,\n          publicIp: heartbeat.publicIp,\n          location: heartbeat.location\n        }\n      });\n\n    // Insert into history\n    await db.insert(heartbeatHistory).values({\n      agentId: heartbeat.agentId,\n      collectedAt: heartbeat.collectedAt,\n      localIp: heartbeat.localIp,\n      publicIp: heartbeat.publicIp,\n      location: heartbeat.location\n    });\n  }\n\n  async getLatestHeartbeat(agentId: string): Promise<HeartbeatCurrent | undefined> {\n    const result = await db.query.heartbeatCurrent.findFirst({\n      where: eq(heartbeatCurrent.agentId, agentId)\n    });\n    return result;\n  }\n\n  // Report methods\n  async insertReport(report: InsertReport): Promise<void> {\n    await db.insert(agentReports).values(report);\n  }\n\n  async getLatestReport(agentId: string, reportType: string): Promise<AgentReport | undefined> {\n    const result = await db.query.agentReports.findFirst({\n      where: (reports, { eq, and }) => and(\n        eq(reports.agentId, agentId),\n        eq(reports.reportType, reportType)\n      ),\n      orderBy: (reports, { desc }) => desc(reports.collectedAt)\n    });\n    return result;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4337},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const agents = pgTable(\"agents\", {\n  agentId: varchar(\"agent_id\").primaryKey(),\n  hostname: text(\"hostname\").notNull(),\n  os: text(\"os\").notNull(),\n  location: text(\"location\").notNull(),\n  username: text(\"username\").notNull(),\n  lastHeartbeat: timestamp(\"last_heartbeat\").notNull(),\n  status: text(\"status\").notNull().default(\"offline\"),\n});\n\nexport const heartbeatCurrent = pgTable(\"heartbeat_current\", {\n  agentId: varchar(\"agent_id\").primaryKey().references(() => agents.agentId),\n  collectedAt: timestamp(\"collected_at\").notNull(),\n  localIp: text(\"local_ip\"),\n  publicIp: text(\"public_ip\"),\n  location: text(\"location\"),\n});\n\nexport const heartbeatHistory = pgTable(\"heartbeat_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentId: varchar(\"agent_id\").notNull().references(() => agents.agentId),\n  collectedAt: timestamp(\"collected_at\").notNull(),\n  localIp: text(\"local_ip\"),\n  publicIp: text(\"public_ip\"),\n  location: text(\"location\"),\n});\n\nexport const agentReports = pgTable(\"agent_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentId: varchar(\"agent_id\").notNull().references(() => agents.agentId),\n  reportType: text(\"report_type\").notNull(),\n  reportData: jsonb(\"report_data\").notNull(),\n  collectedAt: timestamp(\"collected_at\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertAgentSchema = createInsertSchema(agents);\nexport const insertHeartbeatSchema = createInsertSchema(heartbeatCurrent);\nexport const insertReportSchema = createInsertSchema(agentReports);\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Agent = typeof agents.$inferSelect;\nexport type InsertAgent = z.infer<typeof insertAgentSchema>;\nexport type HeartbeatCurrent = typeof heartbeatCurrent.$inferSelect;\nexport type InsertHeartbeat = z.infer<typeof insertHeartbeatSchema>;\nexport type AgentReport = typeof agentReports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\n","size_bytes":2520},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport SystemMonitor from \"@/pages/SystemMonitor\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/monitor\" component={SystemMonitor} />\n      <Route path=\"/security\" component={() => <div className=\"p-6\"><h1>Security Overview</h1><p>Security dashboard coming soon...</p></div>} />\n      <Route path=\"/network\" component={() => <div className=\"p-6\"><h1>Network Monitor</h1><p>Network analysis coming soon...</p></div>} />\n      <Route path=\"/applications\" component={() => <div className=\"p-6\"><h1>Application Manager</h1><p>Application management coming soon...</p></div>} />\n      <Route path=\"/agents\" component={() => <div className=\"p-6\"><h1>Agent Management</h1><p>Agent administration coming soon...</p></div>} />\n      <Route path=\"/database\" component={() => <div className=\"p-6\"><h1>Database</h1><p>Data management interface coming soon...</p></div>} />\n      <Route path=\"/settings\" component={() => <div className=\"p-6\"><h1>Settings</h1><p>System configuration coming soon...</p></div>} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  } as React.CSSProperties;\n\n  const mockAgentCount = {\n    online: 12,\n    total: 15\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar agentCount={mockAgentCount} />\n            <div className=\"flex flex-col flex-1\">\n              <header className=\"flex items-center justify-between p-4 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                <ThemeToggle />\n              </header>\n              <main className=\"flex-1 overflow-auto bg-background\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2691},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 5% 98%;\n\n  --foreground: 220 10% 12%;\n\n  --border: 220 8% 85%;\n\n  --card: 220 10% 95%;\n\n  --card-foreground: 220 10% 12%;\n\n  --card-border: 220 12% 88%;\n\n  --sidebar: 220 8% 92%;\n\n  --sidebar-foreground: 220 12% 15%;\n\n  --sidebar-border: 220 10% 85%;\n\n  --sidebar-primary: 210 70% 55%;\n\n  --sidebar-primary-foreground: 220 5% 98%;\n\n  --sidebar-accent: 220 12% 88%;\n\n  --sidebar-accent-foreground: 220 12% 15%;\n\n  --sidebar-ring: 210 70% 55%;\n\n  --popover: 220 15% 90%;\n\n  --popover-foreground: 220 12% 15%;\n\n  --popover-border: 220 15% 82%;\n\n  --primary: 210 70% 45%;\n\n  --primary-foreground: 220 5% 98%;\n\n  --secondary: 220 15% 85%;\n\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 220 12% 88%;\n\n  --muted-foreground: 220 10% 35%;\n\n  --accent: 220 8% 90%;\n\n  --accent-foreground: 220 12% 20%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 75%;\n  --ring: 210 70% 55%;\n  --chart-1: 142 70% 35%;\n  --chart-2: 35 85% 45%;\n  --chart-3: 210 70% 45%;\n  --chart-4: 270 60% 45%;\n  --chart-5: 15 75% 45%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 8% 85% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 8% 85% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 8% 85% / 0.00), 0px 1px 2px -1px hsl(220 8% 85% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 8% 85% / 0.00), 0px 1px 2px -1px hsl(220 8% 85% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 8% 85% / 0.00), 0px 2px 4px -1px hsl(220 8% 85% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 8% 85% / 0.00), 0px 4px 6px -1px hsl(220 8% 85% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 8% 85% / 0.00), 0px 8px 10px -1px hsl(220 8% 85% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 8% 85% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 220 5% 95%;\n\n  --border: 220 8% 20%;\n\n  --card: 220 12% 12%;\n\n  --card-foreground: 220 5% 95%;\n\n  --card-border: 220 10% 22%;\n\n  --sidebar: 220 10% 10%;\n\n  --sidebar-foreground: 220 5% 92%;\n\n  --sidebar-border: 220 8% 18%;\n\n  --sidebar-primary: 210 70% 55%;\n\n  --sidebar-primary-foreground: 220 15% 8%;\n\n  --sidebar-accent: 220 8% 15%;\n\n  --sidebar-accent-foreground: 220 5% 90%;\n\n  --sidebar-ring: 210 70% 55%;\n\n  --popover: 220 15% 15%;\n\n  --popover-foreground: 220 5% 92%;\n\n  --popover-border: 220 12% 25%;\n\n  --primary: 210 70% 45%;\n\n  --primary-foreground: 220 5% 98%;\n\n  --secondary: 220 10% 18%;\n\n  --secondary-foreground: 220 5% 85%;\n\n  --muted: 220 8% 16%;\n\n  --muted-foreground: 220 5% 70%;\n\n  --accent: 220 6% 14%;\n\n  --accent-foreground: 220 5% 88%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 12% 30%;\n  --ring: 210 70% 55%;\n  --chart-1: 142 70% 65%;\n  --chart-2: 35 85% 65%;\n  --chart-3: 210 70% 65%;\n  --chart-4: 270 60% 65%;\n  --chart-5: 15 75% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 2px 4px -1px hsl(220 15% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 4px 6px -1px hsl(220 15% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 8px 10px -1px hsl(220 15% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9821},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport { Monitor, Activity, Settings, Users } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface AppSidebarProps {\n  agentCount?: {\n    online: number;\n    total: number;\n  };\n}\n\nexport default function AppSidebar({ agentCount = { online: 0, total: 0 } }: AppSidebarProps) {\n  const [location] = useLocation();\n\n  const menuItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/\",\n      icon: Monitor,\n      description: \"Agent overview\"\n    },\n    {\n      title: \"System Monitor\",\n      url: \"/monitor\",\n      icon: Activity,\n      description: \"Performance metrics\"\n    }\n  ];\n\n  const adminItems = [\n    {\n      title: \"Agent Management\",\n      url: \"/agents\",\n      icon: Users,\n      description: \"Manage agents\"\n    },\n    {\n      title: \"Settings\",\n      url: \"/settings\",\n      icon: Settings,\n      description: \"System settings\"\n    }\n  ];\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarHeader className=\"border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-2 px-2 py-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n            <Monitor className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <h2 className=\"font-semibold text-sidebar-foreground\">Agent Monitor</h2>\n            <p className=\"text-xs text-sidebar-foreground/60\">Multi-endpoint dashboard</p>\n          </div>\n        </div>\n        <div className=\"px-2 pb-3\">\n          <div className=\"flex items-center justify-between p-2 bg-sidebar-accent rounded-md\">\n            <div className=\"flex items-center gap-2\">\n              <StatusIndicator status=\"online\" size=\"sm\" />\n              <span className=\"text-sm text-sidebar-foreground\">\n                {agentCount.online}/{agentCount.total} Agents\n              </span>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Live\n            </Badge>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Monitoring</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Administration</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {adminItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-sidebar-border\">\n        <div className=\"flex items-center justify-between p-2\">\n          <div className=\"text-xs text-sidebar-foreground/60\">\n            Last updated: {new Date().toLocaleTimeString()}\n          </div>\n          <ThemeToggle />\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":4434},"client/src/components/DeviceCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport { cn } from \"@/lib/utils\";\nimport { Monitor, MapPin, User, Clock } from \"lucide-react\";\n\ninterface DeviceCardProps {\n  agentId: string;\n  hostname: string;\n  os: string;\n  location: string;\n  username: string;\n  lastHeartbeat: string;\n  status: \"online\" | \"offline\" | \"warning\";\n  onClick?: () => void;\n  className?: string;\n}\n\nexport default function DeviceCard({\n  agentId,\n  hostname,\n  os,\n  location,\n  username,\n  lastHeartbeat,\n  status,\n  onClick,\n  className\n}: DeviceCardProps) {\n  // Calculate time since last heartbeat\n  const getTimeSince = (timestamp: string) => {\n    const now = new Date();\n    const last = new Date(timestamp);\n    const diffMs = now.getTime() - last.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMins < 1) return \"Just now\";\n    if (diffMins < 60) return `${diffMins}m ago`;\n    const hours = Math.floor(diffMins / 60);\n    if (hours < 24) return `${hours}h ago`;\n    const days = Math.floor(hours / 24);\n    return `${days}d ago`;\n  };\n\n  return (\n    <Card \n      className={cn(\n        \"hover-elevate cursor-pointer transition-all duration-200 border-card-border\",\n        className\n      )}\n      onClick={onClick}\n      data-testid={`card-device-${agentId}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-card rounded-md\">\n              <Monitor className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-base\" data-testid={`text-hostname-${hostname}`}>\n                {hostname}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`text-agent-${agentId}`}>\n                {agentId}\n              </p>\n            </div>\n          </div>\n          <StatusIndicator status={status} size=\"md\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Monitor className=\"w-4 h-4\" />\n            <span data-testid={`text-os-${hostname}`}>{os}</span>\n          </div>\n          \n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <User className=\"w-4 h-4\" />\n            <span data-testid={`text-user-${username}`}>{username}</span>\n          </div>\n          \n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <MapPin className=\"w-4 h-4\" />\n            <span data-testid={`text-location-${hostname}`}>{location}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between pt-2 border-t border-card-border\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Clock className=\"w-4 h-4\" />\n              <span data-testid={`text-heartbeat-${hostname}`}>{getTimeSince(lastHeartbeat)}</span>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {status === \"online\" ? \"Active\" : status === \"warning\" ? \"Issues\" : \"Offline\"}\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3415},"client/src/components/DeviceDetailView.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport ProcessTable from \"./ProcessTable\";\nimport SecurityOverview from \"./SecurityOverview\";\nimport NetworkInfo from \"./NetworkInfo\";\nimport InstalledApps from \"./InstalledApps\";\nimport DiskInfo from \"./DiskInfo\"; // Assuming DiskInfo component exists\nimport { ArrowLeft, Monitor, Cpu, HardDrive, MemoryStick, Clock, MapPin } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface DeviceData {\n  // Basic device info\n  agentId: string;\n  hostname: string;\n  os: string;\n  location: string;\n  username: string;\n  lastHeartbeat: string;\n  status: \"online\" | \"offline\" | \"warning\";\n\n  // System info\n  systemInfo?: {\n    cpu: string;\n    ram: string;\n    graphics: string;\n    totalDisk: string;\n  };\n\n  // Disk info\n  diskInfo?: Array<{\n    Device: string;\n    Total: string;\n    Used: string;\n    Free: string;\n    \"Usage %\": string;\n  }>;\n\n  // Process data\n  topProcesses?: {\n    top_cpu: Array<{\n      pid: number;\n      name: string;\n      cpu_percent: number;\n      memory_percent: number;\n      memory_mb: number;\n    }>;\n    top_memory: Array<{\n      pid: number;\n      name: string;\n      cpu_percent: number;\n      memory_percent: number;\n      memory_mb: number;\n    }>;\n  };\n\n  // Network data\n  networkInfo?: {\n    local_ip: string;\n    public_ip: string;\n    location: string;\n    nic_details: Array<{\n      Description: string;\n      MAC: string;\n      ConnectionType: string;\n      \"IP Addresses\": string;\n    }>;\n  };\n\n  // Security data\n  windowsSecurity?: {\n    windows_defender: {\n      antivirus_enabled: boolean;\n      real_time_protection: boolean;\n      am_service_running: boolean;\n      last_quick_scan_days_ago: number;\n    };\n    firewall: Array<{\n      profile: string;\n      enabled: boolean;\n    }>;\n    uac_status: string;\n    installed_av: Array<{\n      name: string;\n      state: string;\n    }>;\n    restart_pending: boolean;\n    recent_patches: Array<{\n      hotfix_id: string;\n      installed_on: string;\n    }>;\n  };\n\n  // Installed apps\n  installedApps?: Array<{\n    name: string;\n    version: string;\n    publisher: string;\n    install_location: string;\n  }>;\n\n  // Open ports (optional)\n  openPorts?: Array<{\n    ip: string;\n    local_port: number;\n    process_name: string;\n    protocol: string;\n    service: string;\n    critical: boolean;\n    recommendation: string;\n  }>;\n}\n\ninterface DeviceDetailViewProps {\n  device: DeviceData;\n  onBack?: () => void;\n  isLoading?: boolean;\n}\n\nexport default function DeviceDetailView({ device, onBack, isLoading }: DeviceDetailViewProps) {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const getTimeSince = (timestamp: string) => {\n    const now = new Date();\n    const last = new Date(timestamp);\n    const diffMs = now.getTime() - last.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n\n    if (diffMins < 1) return \"Just now\";\n    if (diffMins < 60) return `${diffMins}m ago`;\n    const hours = Math.floor(diffMins / 60);\n    if (hours < 24) return `${hours}h ago`;\n    const days = Math.floor(hours / 24);\n    return `${days}d ago`;\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid={`device-detail-${device.hostname}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          {onBack && (\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={onBack}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          )}\n          <div>\n            <div className=\"flex items-center gap-3\">\n              <h1 className=\"text-2xl font-bold\">{device.hostname}</h1>\n              <StatusIndicator status={device.status} size=\"lg\" showLabel />\n            </div>\n            <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n              <span>{device.agentId}</span>\n              <span>•</span>\n              <span>{device.os}</span>\n              <span>•</span>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Last seen: {getTimeSince(device.lastHeartbeat)}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Badge variant={device.status === \"online\" ? \"default\" : \"secondary\"} className=\"text-sm\">\n          {device.status === \"online\" ? \"Active\" : device.status === \"warning\" ? \"Issues Detected\" : \"Offline\"}\n        </Badge>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <Cpu className=\"w-8 h-8 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">CPU</p>\n                <p className=\"font-semibold text-sm\">{device.systemInfo?.cpu.split('(')[0].trim() || 'N/A'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <MemoryStick className=\"w-8 h-8 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">RAM</p>\n                <p className=\"font-semibold text-sm\">{device.systemInfo?.ram || 'N/A'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <HardDrive className=\"w-8 h-8 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Storage</p>\n                <p className=\"font-semibold text-sm\">{device.systemInfo?.totalDisk || 'N/A'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <MapPin className=\"w-8 h-8 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Location</p>\n                <p className=\"font-semibold text-sm\">{device.location.split(' - ')[0] || 'N/A'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"processes\" data-testid=\"tab-processes\">Processes</TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"tab-security\">Security</TabsTrigger>\n          <TabsTrigger value=\"network\" data-testid=\"tab-network\">Network</TabsTrigger>\n          <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">Apps</TabsTrigger>\n          <TabsTrigger value=\"storage\" data-testid=\"tab-storage\">Storage</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-5 bg-muted rounded w-1/3\"></div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"grid grid-cols-3 gap-2\">\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"col-span-2 h-4 bg-muted rounded\"></div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n              <Card className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-5 bg-muted rounded w-1/3\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-32 bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Monitor className=\"w-5 h-5\" />\n                      System Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {device.systemInfo ? (\n                      <>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <span className=\"font-medium\">CPU:</span>\n                          <span className=\"col-span-2\">{device.systemInfo.cpu}</span>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <span className=\"font-medium\">RAM:</span>\n                          <span className=\"col-span-2\">{device.systemInfo.ram}</span>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <span className=\"font-medium\">Graphics:</span>\n                          <span className=\"col-span-2\">{device.systemInfo.graphics}</span>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <span className=\"font-medium\">Total Disk:</span>\n                          <span className=\"col-span-2\">{device.systemInfo.totalDisk}</span>\n                        </div>\n                      </>\n                    ) : (\n                      <p className=\"text-muted-foreground text-sm\">System information not available</p>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <DiskInfo diskData={device.diskInfo || []} />\n              </div>\n\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                <ProcessTable \n                  processes={device.topProcesses?.top_cpu || []} \n                  title=\"Top CPU Processes\" \n                  type=\"cpu\"\n                  systemUsage={{ cpu: 15.4, memory: 65.2 }}\n                />\n                <ProcessTable \n                  processes={device.topProcesses?.top_memory || []} \n                  title=\"Top Memory Processes\" \n                  type=\"memory\"\n                  systemUsage={{ memory: 65.2, totalRam: device.systemInfo?.ram || \"Unknown\" }}\n                />\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"processes\" className=\"space-y-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n              <Card className=\"animate-pulse h-96\">\n                <CardHeader>\n                  <div className=\"h-5 bg-muted rounded w-1/3\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-full bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n              <Card className=\"animate-pulse h-96\">\n                <CardHeader>\n                  <div className=\"h-5 bg-muted rounded w-1/3\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-full bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n              <ProcessTable\n                processes={device.topProcesses?.top_cpu.slice(0, 10) || []}\n                title=\"Top CPU Processes\"\n                type=\"cpu\"\n                systemUsage={{ cpu: 15.4, memory: 65.2 }}\n              />\n              <ProcessTable\n                processes={device.topProcesses?.top_memory.slice(0, 10) || []}\n                title=\"Top Memory Processes\"\n                type=\"memory\"\n                systemUsage={{ memory: 65.2 }}\n              />\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          {isLoading ? (\n            <Card className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-5 bg-muted rounded w-1/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-32 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ) : (\n            <SecurityOverview\n              windowsDefender={device.windowsSecurity?.windows_defender}\n              firewall={device.windowsSecurity?.firewall || []}\n              uacStatus={device.windowsSecurity?.uac_status}\n              installedAv={device.windowsSecurity?.installed_av || []}\n              restartPending={device.windowsSecurity?.restart_pending}\n              recentPatches={device.windowsSecurity?.recent_patches || []}\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"network\" className=\"space-y-6\">\n          {isLoading ? (\n            <Card className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-5 bg-muted rounded w-1/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-32 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ) : (\n            <NetworkInfo\n              localIp={device.networkInfo?.local_ip}\n              publicIp={device.networkInfo?.public_ip}\n              location={device.networkInfo?.location}\n              nicDetails={device.networkInfo?.nic_details || []}\n              openPorts={device.openPorts || []}\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"applications\" className=\"space-y-6\">\n          {isLoading ? (\n            <Card className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-5 bg-muted rounded w-1/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-12 bg-muted rounded\"></div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <InstalledApps apps={device.installedApps || []} />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"storage\" className=\"space-y-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              {[...Array(2)].map((_, index) => (\n                <Card key={index} className=\"animate-pulse\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"h-5 bg-muted rounded w-1/3\"></div>\n                      <div className=\"h-6 w-16 bg-muted rounded\"></div>\n                    </div>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <div className=\"h-4 w-1/4 bg-muted rounded\"></div>\n                        <div className=\"h-4 w-1/4 bg-muted rounded\"></div>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <div className=\"h-4 w-1/4 bg-muted rounded\"></div>\n                        <div className=\"h-4 w-1/4 bg-muted rounded\"></div>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <div className=\"h-4 w-1/4 bg-muted rounded\"></div>\n                        <div className=\"h-4 w-1/4 bg-muted rounded\"></div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              {(device.diskInfo || []).map((disk, index) => (\n                <Card key={index}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{disk.Device}</h4>\n                      <Badge variant=\"outline\">{disk[\"Usage %\"]}</Badge>\n                    </div>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Total:</span>\n                        <span>{disk.Total}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Used:</span>\n                        <span>{disk.Used}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Free:</span>\n                        <span>{disk.Free}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17746},"client/src/components/DeviceList.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport DeviceCard from \"./DeviceCard\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport { Search, Filter, RefreshCw } from \"lucide-react\";\nimport { useState, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Device {\n  agentId: string;\n  hostname: string;\n  os: string;\n  location: string;\n  username: string;\n  lastHeartbeat: string;\n  status: \"online\" | \"offline\" | \"warning\";\n}\n\ninterface DeviceListProps {\n  devices: Device[];\n  onDeviceSelect?: (device: Device) => void;\n  onRefresh?: () => void;\n  isLoading?: boolean;\n}\n\nexport default function DeviceList({ \n  devices, \n  onDeviceSelect, \n  onRefresh,\n  isLoading = false \n}: DeviceListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<\"all\" | \"online\" | \"offline\" | \"warning\">(\"all\");\n\n  const stats = useMemo(() => {\n    const online = devices.filter(d => d.status === \"online\").length;\n    const offline = devices.filter(d => d.status === \"offline\").length;\n    const warning = devices.filter(d => d.status === \"warning\").length;\n    return { online, offline, warning, total: devices.length };\n  }, [devices]);\n\n  const filteredDevices = useMemo(() => {\n    return devices.filter(device => {\n      const matchesSearch = searchQuery === \"\" || \n        device.hostname.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        device.agentId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        device.location.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        device.username.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      const matchesStatus = statusFilter === \"all\" || device.status === statusFilter;\n      \n      return matchesSearch && matchesStatus;\n    });\n  }, [devices, searchQuery, statusFilter]);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"device-list\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Agent Dashboard</h1>\n          <p className=\"text-muted-foreground\">Monitor and manage Windows endpoints</p>\n        </div>\n        <Button \n          onClick={onRefresh} \n          disabled={isLoading}\n          className=\"gap-2\"\n          data-testid=\"button-refresh\"\n        >\n          <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"border-green-200 dark:border-green-800\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <StatusIndicator status=\"online\" size=\"lg\" />\n              <div>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.online}</p>\n                <p className=\"text-sm text-muted-foreground\">Online</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-yellow-200 dark:border-yellow-800\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <StatusIndicator status=\"warning\" size=\"lg\" />\n              <div>\n                <p className=\"text-2xl font-bold text-yellow-600\">{stats.warning}</p>\n                <p className=\"text-sm text-muted-foreground\">Warning</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-red-200 dark:border-red-800\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <StatusIndicator status=\"offline\" size=\"lg\" />\n              <div>\n                <p className=\"text-2xl font-bold text-red-600\">{stats.offline}</p>\n                <p className=\"text-sm text-muted-foreground\">Offline</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-4 h-4 bg-primary rounded-full\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n                <p className=\"text-sm text-muted-foreground\">Total Agents</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              Devices\n              <Badge variant=\"outline\">\n                {filteredDevices.length} of {devices.length}\n              </Badge>\n            </CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 mb-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"w-4 h-4 absolute left-3 top-3 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by hostname, agent ID, location, or user...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-devices\"\n              />\n            </div>\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value as any)}\n              className=\"px-3 py-2 text-sm border border-input bg-background rounded-md min-w-[120px]\"\n              data-testid=\"select-status-filter\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"online\">Online</option>\n              <option value=\"warning\">Warning</option>\n              <option value=\"offline\">Offline</option>\n            </select>\n          </div>\n\n          {/* Device Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"h-48 bg-muted animate-pulse rounded-lg\" />\n              ))}\n            </div>\n          ) : filteredDevices.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredDevices.map((device) => (\n                <DeviceCard\n                  key={device.agentId}\n                  {...device}\n                  onClick={() => {\n                    console.log(`Selected device: ${device.hostname}`);\n                    onDeviceSelect?.(device);\n                  }}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-muted-foreground\">No devices found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {searchQuery || statusFilter !== \"all\" \n                  ? \"Try adjusting your search or filters\"\n                  : \"No devices are currently registered\"\n                }\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7474},"client/src/components/InstalledApps.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Package, Search, Filter } from \"lucide-react\";\nimport { useState, useMemo } from \"react\";\n\ninterface InstalledApp {\n  name: string;\n  version: string;\n  publisher: string;\n  install_location: string;\n}\n\ninterface InstalledAppsProps {\n  apps: InstalledApp[];\n}\n\nexport default function InstalledApps({ apps }: InstalledAppsProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [publisherFilter, setPublisherFilter] = useState(\"all\");\n\n  const publishers = useMemo(() => {\n    const publisherSet = new Set(apps.map(app => app.publisher));\n    const uniquePublishers = Array.from(publisherSet);\n    return uniquePublishers.filter(p => p !== \"Unknown\").sort();\n  }, [apps]);\n\n  const filteredApps = useMemo(() => {\n    return apps.filter(app => {\n      const matchesSearch = searchQuery === \"\" || \n        app.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        app.publisher.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      const matchesPublisher = publisherFilter === \"all\" || app.publisher === publisherFilter;\n      \n      return matchesSearch && matchesPublisher;\n    });\n  }, [apps, searchQuery, publisherFilter]);\n\n  return (\n    <Card data-testid=\"card-installed-apps\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-5 h-5\" />\n            Installed Applications\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {filteredApps.length} of {apps.length}\n            </Badge>\n          </CardTitle>\n        </div>\n        <div className=\"flex gap-4 pt-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"w-4 h-4 absolute left-3 top-3 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search applications...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-9\"\n              data-testid=\"input-search-apps\"\n            />\n          </div>\n          <select\n            value={publisherFilter}\n            onChange={(e) => setPublisherFilter(e.target.value)}\n            className=\"px-3 py-2 text-sm border border-input bg-background rounded-md\"\n            data-testid=\"select-publisher-filter\"\n          >\n            <option value=\"all\">All Publishers</option>\n            {publishers.slice(0, 10).map(publisher => (\n              <option key={publisher} value={publisher}>\n                {publisher.length > 30 ? `${publisher.substring(0, 30)}...` : publisher}\n              </option>\n            ))}\n          </select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n          {filteredApps.map((app, index) => (\n            <div \n              key={index} \n              className=\"flex items-center justify-between p-3 border border-card-border rounded-md hover-elevate\"\n              data-testid={`row-app-${index}`}\n            >\n              <div className=\"flex-1 min-w-0\">\n                <h4 className=\"font-medium text-sm truncate\" title={app.name}>\n                  {app.name}\n                </h4>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {app.publisher}\n                  </span>\n                  {app.version !== \"Unknown\" && (\n                    <>\n                      <span className=\"text-xs text-muted-foreground\">•</span>\n                      <span className=\"text-xs text-muted-foreground font-mono\">\n                        v{app.version}\n                      </span>\n                    </>\n                  )}\n                </div>\n                {app.install_location !== \"Unknown\" && (\n                  <div className=\"text-xs text-muted-foreground font-mono mt-1 truncate\" title={app.install_location}>\n                    {app.install_location}\n                  </div>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Installed\n                </Badge>\n              </div>\n            </div>\n          ))}\n          \n          {filteredApps.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Package className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No applications found matching your criteria</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4887},"client/src/components/NetworkInfo.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Globe, Wifi, Network, MapPin, Shield, AlertTriangle } from \"lucide-react\";\n\ninterface NicDetail {\n  Description: string;\n  MAC: string;\n  ConnectionType: string;\n  \"IP Addresses\": string;\n}\n\ninterface OpenPort {\n  ip: string;\n  local_port: number;\n  process_name: string;\n  protocol: string;\n  service: string;\n  critical: boolean;\n  recommendation: string;\n}\n\ninterface NetworkInfoProps {\n  localIp: string;\n  publicIp: string;\n  location: string;\n  nicDetails: NicDetail[];\n  openPorts?: OpenPort[];\n}\n\nexport default function NetworkInfo({\n  localIp,\n  publicIp,\n  location,\n  nicDetails,\n  openPorts = []\n}: NetworkInfoProps) {\n  const criticalPorts = openPorts.filter(port => port.critical);\n\n  return (\n    <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"w-5 h-5\" />\n            IP Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Local IP</span>\n              <span className=\"font-mono text-sm\" data-testid=\"text-local-ip\">{localIp}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Public IP</span>\n              <span className=\"font-mono text-sm\" data-testid=\"text-public-ip\">{publicIp}</span>\n            </div>\n          </div>\n          <div className=\"pt-2 border-t border-card-border\">\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-sm\" data-testid=\"text-location\">{location}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Network className=\"w-5 h-5\" />\n            Network Adapters\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {nicDetails.map((nic, index) => (\n            <div key={index} className=\"space-y-2 p-3 bg-muted rounded-md\">\n              <div className=\"flex items-center gap-2\">\n                {nic.ConnectionType === \"Wi-Fi\" ? \n                  <Wifi className=\"w-4 h-4\" /> : \n                  <Network className=\"w-4 h-4\" />\n                }\n                <span className=\"font-medium text-sm truncate\" title={nic.Description}>\n                  {nic.Description.length > 25 ? \n                    `${nic.Description.substring(0, 25)}...` : \n                    nic.Description\n                  }\n                </span>\n              </div>\n              <div className=\"space-y-1 text-xs text-muted-foreground\">\n                <div>MAC: <span className=\"font-mono\">{nic.MAC}</span></div>\n                <div>IPs: <span className=\"font-mono\">{nic[\"IP Addresses\"]}</span></div>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {nic.ConnectionType}\n              </Badge>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {criticalPorts.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Critical Ports\n              <Badge variant=\"destructive\" className=\"ml-2\">\n                {criticalPorts.length}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {criticalPorts.slice(0, 5).map((port, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 border border-orange-200 dark:border-orange-800 rounded\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n                  <div>\n                    <span className=\"font-mono text-sm\" data-testid={`text-port-${port.local_port}`}>\n                      {port.local_port}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground ml-2\">\n                      {port.service}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-xs text-muted-foreground\">{port.process_name}</div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {port.protocol}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n            {criticalPorts.length > 5 && (\n              <div className=\"text-center pt-2\">\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{criticalPorts.length - 5} more ports\n                </Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":5273},"client/src/components/ProcessTable.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface Process {\n  pid: number;\n  name: string;\n  cpu_percent: number;\n  memory_percent: number;\n  memory_mb: number;\n}\n\ninterface ProcessTableProps {\n  processes: Process[];\n  title: string;\n  type: \"cpu\" | \"memory\";\n  systemUsage?: {\n    cpu?: number;\n    memory?: number;\n    totalRam?: string;\n  };\n}\n\nexport default function ProcessTable({ \n  processes, \n  title, \n  type,\n  systemUsage \n}: ProcessTableProps) {\n  const formatBytes = (mb: number) => {\n    if (mb < 1024) return `${mb.toFixed(1)} MB`;\n    return `${(mb / 1024).toFixed(1)} GB`;\n  };\n\n  return (\n    <Card data-testid={`card-process-${type}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">{title}</CardTitle>\n          {systemUsage && (\n            <div className=\"flex gap-4 text-sm\">\n              {systemUsage.cpu !== undefined && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-muted-foreground\">System CPU:</span>\n                  <Badge variant=\"outline\" data-testid=\"text-system-cpu\">\n                    {systemUsage.cpu.toFixed(1)}%\n                  </Badge>\n                </div>\n              )}\n              {systemUsage.memory !== undefined && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-muted-foreground\">System Memory:</span>\n                  <Badge variant=\"outline\" data-testid=\"text-system-memory\">\n                    {systemUsage.memory.toFixed(1)}%\n                  </Badge>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>PID</TableHead>\n              <TableHead>Process Name</TableHead>\n              <TableHead className=\"text-right\">\n                {type === \"cpu\" ? \"CPU %\" : \"Memory\"}\n              </TableHead>\n              <TableHead className=\"text-right\">\n                {type === \"cpu\" ? \"Memory\" : \"Memory %\"}\n              </TableHead>\n              <TableHead className=\"w-[100px]\">Usage</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {processes.map((process, index) => (\n              <TableRow key={`${process.pid}-${index}`} data-testid={`row-process-${process.pid}`}>\n                <TableCell className=\"font-mono text-sm\">\n                  {process.pid}\n                </TableCell>\n                <TableCell className=\"font-medium max-w-[200px] truncate\">\n                  {process.name}\n                </TableCell>\n                <TableCell className=\"text-right font-mono\">\n                  {type === \"cpu\" \n                    ? `${process.cpu_percent.toFixed(1)}%`\n                    : formatBytes(process.memory_mb)\n                  }\n                </TableCell>\n                <TableCell className=\"text-right font-mono\">\n                  {type === \"cpu\"\n                    ? formatBytes(process.memory_mb)\n                    : `${process.memory_percent.toFixed(1)}%`\n                  }\n                </TableCell>\n                <TableCell>\n                  <Progress \n                    value={type === \"cpu\" ? process.cpu_percent : process.memory_percent}\n                    className=\"h-2\"\n                  />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3842},"client/src/components/SecurityOverview.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport { Shield, ShieldCheck, ShieldAlert, AlertTriangle, Clock, CheckCircle } from \"lucide-react\";\n\ninterface WindowsDefenderStatus {\n  antivirus_enabled: boolean;\n  real_time_protection: boolean;\n  am_service_running: boolean;\n  last_quick_scan_days_ago: string | number;\n}\n\ninterface FirewallProfile {\n  profile: string;\n  enabled: boolean;\n}\n\ninterface AntivirusProduct {\n  name: string;\n  state: string;\n}\n\ninterface SecurityOverviewProps {\n  windowsDefender: WindowsDefenderStatus;\n  firewall: FirewallProfile[];\n  uacStatus: string;\n  installedAv: AntivirusProduct[];\n  restartPending: boolean;\n  recentPatches: Array<{\n    hotfix_id: string;\n    installed_on: string;\n  }>;\n}\n\nexport default function SecurityOverview({\n  windowsDefender,\n  firewall,\n  uacStatus,\n  installedAv,\n  restartPending,\n  recentPatches\n}: SecurityOverviewProps) {\n  const getSecurityStatus = () => {\n    if (!windowsDefender.antivirus_enabled || !windowsDefender.real_time_protection) {\n      return \"error\";\n    }\n    if (restartPending || uacStatus === \"Disabled\") {\n      return \"warning\";\n    }\n    return \"online\";\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\" data-testid=\"card-security-overview\">\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            Windows Defender\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm\">Antivirus Protection</span>\n            <StatusIndicator \n              status={windowsDefender.antivirus_enabled ? \"online\" : \"error\"}\n              showLabel\n              label={windowsDefender.antivirus_enabled ? \"Enabled\" : \"Disabled\"}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm\">Real-time Protection</span>\n            <StatusIndicator \n              status={windowsDefender.real_time_protection ? \"online\" : \"error\"}\n              showLabel\n              label={windowsDefender.real_time_protection ? \"Enabled\" : \"Disabled\"}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm\">Service Status</span>\n            <StatusIndicator \n              status={windowsDefender.am_service_running ? \"online\" : \"error\"}\n              showLabel\n              label={windowsDefender.am_service_running ? \"Running\" : \"Stopped\"}\n            />\n          </div>\n          <div className=\"flex items-center justify-between pt-2 border-t border-card-border\">\n            <span className=\"text-sm\">Last Scan</span>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {typeof windowsDefender.last_quick_scan_days_ago === 'number' \n                ? `${windowsDefender.last_quick_scan_days_ago} days ago`\n                : windowsDefender.last_quick_scan_days_ago\n              }\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <ShieldCheck className=\"w-5 h-5\" />\n            System Security\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm\">User Account Control</span>\n            <StatusIndicator \n              status={uacStatus === \"Enabled\" ? \"online\" : \"warning\"}\n              showLabel\n              label={uacStatus}\n            />\n          </div>\n          \n          {firewall.map((profile, index) => (\n            <div key={index} className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">{profile.profile} Firewall</span>\n              <StatusIndicator \n                status={profile.enabled ? \"online\" : \"error\"}\n                showLabel\n                label={profile.enabled ? \"Enabled\" : \"Disabled\"}\n              />\n            </div>\n          ))}\n\n          {restartPending && (\n            <div className=\"flex items-center justify-between pt-2 border-t border-card-border\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />\n                <span className=\"text-sm\">Restart Required</span>\n              </div>\n              <Badge variant=\"destructive\">Pending</Badge>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"lg:col-span-2\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"w-5 h-5\" />\n            Recent Security Updates\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {recentPatches.slice(0, 6).map((patch, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-md\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"font-mono text-sm\" data-testid={`text-patch-${patch.hotfix_id}`}>\n                    {patch.hotfix_id}\n                  </span>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {new Date(patch.installed_on).toLocaleDateString()}\n                </span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {installedAv.length > 0 && (\n        <Card className=\"lg:col-span-2\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <ShieldAlert className=\"w-5 h-5\" />\n              Third-party Antivirus\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {installedAv.map((av, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-md\">\n                  <span className=\"font-medium\" data-testid={`text-av-${av.name}`}>{av.name}</span>\n                  <StatusIndicator \n                    status={av.state === \"Enabled\" ? \"online\" : \"error\"}\n                    showLabel\n                    label={av.state}\n                  />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6854},"client/src/components/StatusIndicator.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatusIndicatorProps {\n  status: \"online\" | \"offline\" | \"warning\" | \"error\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  showLabel?: boolean;\n  label?: string;\n  className?: string;\n}\n\nconst statusConfig = {\n  online: {\n    color: \"bg-green-500\",\n    label: \"Online\",\n    pulse: true\n  },\n  offline: {\n    color: \"bg-gray-400\",\n    label: \"Offline\", \n    pulse: false\n  },\n  warning: {\n    color: \"bg-yellow-500\",\n    label: \"Warning\",\n    pulse: true\n  },\n  error: {\n    color: \"bg-red-500\", \n    label: \"Error\",\n    pulse: true\n  }\n};\n\nconst sizeConfig = {\n  sm: \"w-2 h-2\",\n  md: \"w-3 h-3\",\n  lg: \"w-4 h-4\"\n};\n\nexport default function StatusIndicator({ \n  status, \n  size = \"md\", \n  showLabel = false, \n  label,\n  className \n}: StatusIndicatorProps) {\n  const config = statusConfig[status];\n  const displayLabel = label || config.label;\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)} data-testid={`status-${status}`}>\n      <div className=\"relative\">\n        <div className={cn(\n          \"rounded-full\",\n          config.color,\n          sizeConfig[size]\n        )} />\n        {config.pulse && (\n          <div className={cn(\n            \"absolute inset-0 rounded-full animate-ping\",\n            config.color,\n            sizeConfig[size]\n          )} />\n        )}\n      </div>\n      {showLabel && (\n        <span className=\"text-sm text-muted-foreground\" data-testid={`text-${status}`}>\n          {displayLabel}\n        </span>\n      )}\n    </div>\n  );\n}","size_bytes":1518},"client/src/components/ThemeToggle.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    // Check for saved theme preference or default to 'dark' for monitoring\n    const saved = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const systemPreference = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    const defaultTheme = saved || \"dark\"; // Default to dark for monitoring dashboard\n    \n    setTheme(defaultTheme);\n    updateTheme(defaultTheme);\n  }, []);\n\n  const updateTheme = (newTheme: \"light\" | \"dark\") => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(newTheme);\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    updateTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    console.log(`Theme switched to ${newTheme}`);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"hover-elevate\"\n      data-testid=\"button-theme-toggle\"\n      title={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1489},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { Activity, Server, Shield, AlertTriangle, CheckCircle, XCircle } from \"lucide-react\";\n\ninterface Device {\n  agentId: string;\n  hostname: string;\n  os: string;\n  location: string;\n  username: string;\n  lastHeartbeat: string;\n  status: \"online\" | \"offline\" | \"warning\";\n  networkInfo?: {\n    local_ip?: string;\n  };\n}\n\ninterface DashboardStats {\n  total: number;\n  online: number;\n  offline: number;\n  warning: number;\n  locations: string[];\n  osTypes: { [key: string]: number };\n}\n\n// Placeholder for the DiskInfo component, assuming it will be created elsewhere.\n// This is a minimal placeholder to resolve the import error.\nconst DiskInfo = () => {\n  return <div className=\"text-sm text-muted-foreground\">Disk Info Placeholder</div>;\n};\n\nexport default function Dashboard() {\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [stats, setStats] = useState<DashboardStats>({\n    total: 0,\n    online: 0,\n    offline: 0,\n    warning: 0,\n    locations: [],\n    osTypes: {}\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        const response = await fetch('/api/agents');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data: Device[] = await response.json();\n        setDevices(data);\n\n        // Calculate statistics\n        const newStats: DashboardStats = {\n          total: data.length,\n          online: data.filter(d => d.status === 'online').length,\n          offline: data.filter(d => d.status === 'offline').length,\n          warning: data.filter(d => d.status === 'warning').length,\n          locations: [...new Set(data.map(d => d.location))],\n          osTypes: data.reduce((acc, device) => {\n            const osType = device.os.includes('Windows') ? 'Windows' : device.os.split(' ')[0];\n            acc[osType] = (acc[osType] || 0) + 1;\n            return acc;\n          }, {} as { [key: string]: number })\n        };\n        setStats(newStats);\n      } catch (error) {\n        console.error(\"Failed to fetch devices:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDevices();\n    const interval = setInterval(fetchDevices, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const recentAlerts = devices\n    .filter(d => d.status === 'offline' || d.status === 'warning')\n    .slice(0, 5);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\">Dashboard Overview</h1>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-muted rounded w-1/3 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getUptime = () => {\n    if (stats.total === 0) return '0%';\n    const uptimePercentage = ((stats.online / stats.total) * 100).toFixed(1);\n    return `${uptimePercentage}%`;\n  };\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Header with Gradient */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/10 to-purple-600/10 rounded-lg\"></div>\n        <div className=\"relative p-6\">\n          <h1 className=\"text-4xl font-bold tracking-tight bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            IT Infrastructure Dashboard\n          </h1>\n          <p className=\"text-lg text-muted-foreground mt-2\">\n            Real-time monitoring and insights across your entire IT environment\n          </p>\n        </div>\n      </div>\n\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"border-l-4 border-l-green-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              System Uptime\n            </CardTitle>\n            <Activity className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{getUptime()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.online} of {stats.total} systems online\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-blue-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Active Devices\n            </CardTitle>\n            <Server className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.online}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently connected and reporting\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-yellow-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Warnings\n            </CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{stats.warning}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Systems requiring attention\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-red-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Offline\n            </CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.offline}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Systems not responding\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Device Status */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Quick Device Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Server className=\"w-5 h-5\" />\n              Device Status Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"flex items-center justify-between p-3 border rounded-lg animate-pulse\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-3 h-3 bg-muted rounded-full\"></div>\n                      <div className=\"space-y-1\">\n                        <div className=\"h-4 w-32 bg-muted rounded\"></div>\n                        <div className=\"h-3 w-24 bg-muted rounded\"></div>\n                      </div>\n                    </div>\n                    <div className=\"h-6 w-16 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : devices.length > 0 ? (\n              <div className=\"space-y-3\">\n                {devices.slice(0, 5).map((device) => (\n                  <div key={device.agentId} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-3 h-3 rounded-full ${\n                        device.status === 'online' ? 'bg-green-500' :\n                        device.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\n                      }`} />\n                      <div>\n                        <p className=\"font-medium text-sm\">{device.hostname}</p>\n                        <p className=\"text-xs text-muted-foreground\">{device.os}</p>\n                      </div>\n                    </div>\n                    <Badge variant={device.status === \"online\" ? \"default\" : device.status === \"warning\" ? \"secondary\" : \"destructive\"}>\n                      {device.status}\n                    </Badge>\n                  </div>\n                ))}\n                {devices.length > 5 && (\n                  <div className=\"text-center pt-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      +{devices.length - 5} more devices\n                    </p>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Server className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No devices connected</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* System Health Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              System Health Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"font-medium\">Healthy Systems</span>\n                </div>\n                <span className=\"text-green-600 font-bold\">{stats.online}</span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                  <span className=\"font-medium\">Needs Attention</span>\n                </div>\n                <span className=\"text-yellow-600 font-bold\">{stats.warning}</span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <Activity className=\"w-5 h-5 text-red-600\" />\n                  <span className=\"font-medium\">Critical Issues</span>\n                </div>\n                <span className=\"text-red-600 font-bold\">{stats.offline}</span>\n              </div>\n\n              <div className=\"pt-2 border-t\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Last Updated:</span>\n                  <span className=\"font-mono\">{new Date().toLocaleTimeString()}</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Operating Systems Distribution */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Operating Systems\n          </CardTitle>\n          <CardDescription>Distribution across your fleet</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Object.entries(stats.osTypes).length === 0 && stats.total === 0 && (\n            <p className=\"text-sm text-muted-foreground\">No OS data available.</p>\n          )}\n          {Object.entries(stats.osTypes).map(([os, count]) => (\n            <div key={os} className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">{os}</span>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-24 bg-muted rounded-full h-2\">\n                  <div\n                    className=\"bg-primary h-2 rounded-full transition-all\"\n                    style={{ width: `${(count / stats.total) * 100}%` }}\n                  />\n                </div>\n                <span className=\"text-sm text-muted-foreground w-8\">{count}</span>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Locations Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Global Distribution</CardTitle>\n          <CardDescription>Agents across different locations</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {stats.locations.length === 0 && stats.total === 0 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-4 col-span-full\">No location data available.</p>\n            ) : (\n              stats.locations.map((location) => {\n                const locationDevices = devices.filter(d => d.location === location);\n                const locationStats = {\n                  total: locationDevices.length,\n                  online: locationDevices.filter(d => d.status === 'online').length,\n                  offline: locationDevices.filter(d => d.status === 'offline').length,\n                  warning: locationDevices.filter(d => d.status === 'warning').length\n                };\n\n                return (\n                  <div key={location} className=\"p-4 border rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">{location}</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Total: {locationStats.total}</span>\n                      </div>\n                      <div className=\"flex gap-1\">\n                        {locationStats.online > 0 && (\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                            <span className=\"text-xs\">{locationStats.online}</span>\n                          </div>\n                        )}\n                        {locationStats.warning > 0 && (\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                            <span className=\"text-xs\">{locationStats.warning}</span>\n                          </div>\n                        )}\n                        {locationStats.offline > 0 && (\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                            <span className=\"text-xs\">{locationStats.offline}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15870},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import { SidebarProvider } from \"@/components/ui/sidebar\";\nimport AppSidebar from '../AppSidebar';\n\nexport default function AppSidebarExample() {\n  const mockAgentCount = {\n    online: 12,\n    total: 15\n  };\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  } as React.CSSProperties;\n\n  return (\n    <SidebarProvider style={style}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar agentCount={mockAgentCount} />\n        <div className=\"flex-1 p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Application Sidebar</h3>\n          <p className=\"text-muted-foreground\">\n            This sidebar provides navigation for the multi-agent monitoring dashboard.\n            It shows the current agent status and provides access to all monitoring features.\n          </p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":883},"client/src/components/examples/DeviceCard.tsx":{"content":"import DeviceCard from '../DeviceCard';\n\nexport default function DeviceCardExample() {\n  //todo: remove mock functionality\n  const mockDevices = [\n    {\n      agentId: \"AGENT005\",\n      hostname: \"DESKTOP-CMM8H3C\",\n      os: \"Windows 11 Home Single Language\",\n      location: \"Bengaluru - Karnataka - India\",\n      username: \"basav\",\n      lastHeartbeat: new Date(Date.now() - 300000).toISOString(), // 5 mins ago\n      status: \"online\" as const\n    },\n    {\n      agentId: \"AGENT003\",\n      hostname: \"WORKSTATION-01\",\n      os: \"Windows 11 Pro\",\n      location: \"New York - NY - USA\",\n      username: \"john.doe\",\n      lastHeartbeat: new Date(Date.now() - 1800000).toISOString(), // 30 mins ago\n      status: \"warning\" as const\n    },\n    {\n      agentId: \"AGENT001\",\n      hostname: \"LAPTOP-DEV\",\n      os: \"Windows 10 Enterprise\",\n      location: \"London - England - UK\",\n      username: \"jane.smith\",\n      lastHeartbeat: new Date(Date.now() - 7200000).toISOString(), // 2 hours ago\n      status: \"offline\" as const\n    }\n  ];\n\n  return (\n    <div className=\"p-6 space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Device Cards</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {mockDevices.map((device) => (\n          <DeviceCard\n            key={device.agentId}\n            {...device}\n            onClick={() => console.log(`Selected device: ${device.hostname}`)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":1471},"client/src/components/examples/DeviceDetailView.tsx":{"content":"import DeviceDetailView from '../DeviceDetailView';\n\nexport default function DeviceDetailViewExample() {\n  //todo: remove mock functionality\n  const mockDeviceData = {\n    agentId: \"AGENT005\",\n    hostname: \"DESKTOP-CMM8H3C\", \n    os: \"Microsoft Windows 11 Home Single Language (10.0.26100)\",\n    location: \"Bengaluru - Karnataka - India\",\n    username: \"basav\",\n    lastHeartbeat: new Date(Date.now() - 300000).toISOString(),\n    status: \"online\" as const,\n    \n    systemInfo: {\n      cpu: \"AMD Ryzen 5 5600H with Radeon Graphics (6 cores / 12 threads, 3301 MHz)\",\n      ram: \"7.35 GB\",\n      graphics: \"AMD Radeon(TM) Graphics, Radeon RX 5500M\",\n      totalDisk: \"476.11 GB\"\n    },\n    \n    diskInfo: [\n      {\n        Device: \"C:\\\\\",\n        Total: \"389.79 GB\",\n        Used: \"231.05 GB\", \n        Free: \"158.74 GB\",\n        \"Usage %\": \"59.3 %\"\n      },\n      {\n        Device: \"E:\\\\\",\n        Total: \"86.31 GB\",\n        Used: \"21.10 GB\",\n        Free: \"65.22 GB\", \n        \"Usage %\": \"24.4 %\"\n      }\n    ],\n    \n    topProcesses: {\n      top_cpu: [\n        {\n          pid: 48408,\n          name: \"WmiPrvSE.exe\",\n          cpu_percent: 25.2,\n          memory_percent: 0.505,\n          memory_mb: 37.98\n        },\n        {\n          pid: 5264,\n          name: \"am_aiops_agent_restart.exe\", \n          cpu_percent: 15.6,\n          memory_percent: 0.076,\n          memory_mb: 5.69\n        }\n      ],\n      top_memory: [\n        {\n          pid: 21908,\n          name: \"brave.exe\",\n          cpu_percent: 0.0,\n          memory_percent: 4.095,\n          memory_mb: 308.05\n        },\n        {\n          pid: 3488,\n          name: \"MemCompression\",\n          cpu_percent: 0.0, \n          memory_percent: 3.245,\n          memory_mb: 244.12\n        }\n      ]\n    },\n    \n    networkInfo: {\n      local_ip: \"192.168.1.80\",\n      public_ip: \"139.167.219.110\",\n      location: \"Bengaluru - Karnataka - India\",\n      nic_details: [\n        {\n          Description: \"Realtek Gaming GbE Family Controller\",\n          MAC: \"84:69:93:6F:43:04\",\n          ConnectionType: \"LAN\",\n          \"IP Addresses\": \"192.168.1.80, fe80::ba77:9754:bc7:6e3b\"\n        }\n      ]\n    },\n    \n    windowsSecurity: {\n      windows_defender: {\n        antivirus_enabled: true,\n        real_time_protection: true,\n        am_service_running: true,\n        last_quick_scan_days_ago: 2\n      },\n      firewall: [\n        { profile: \"Domain\", enabled: true },\n        { profile: \"Private\", enabled: true },\n        { profile: \"Public\", enabled: true }\n      ],\n      uac_status: \"Enabled\",\n      installed_av: [\n        { name: \"Windows Defender\", state: \"Enabled\" }\n      ],\n      restart_pending: false,\n      recent_patches: [\n        { hotfix_id: \"KB5034441\", installed_on: \"2024-01-15T10:30:00Z\" },\n        { hotfix_id: \"KB5034123\", installed_on: \"2024-01-10T14:20:00Z\" }\n      ]\n    },\n    \n    installedApps: [\n      {\n        name: \"Google Chrome\",\n        version: \"140.0.7339.208\",\n        publisher: \"Google LLC\",\n        install_location: \"Unknown\"\n      },\n      {\n        name: \"Docker Desktop\",\n        version: \"4.38.0\",\n        publisher: \"Docker Inc.\", \n        install_location: \"C:\\\\Program Files\\\\Docker\\\\Docker\"\n      }\n    ],\n    \n    openPorts: [\n      {\n        ip: \"0.0.0.0\",\n        local_port: 445,\n        process_name: \"System\",\n        protocol: \"TCP\",\n        service: \"SMB\",\n        critical: true,\n        recommendation: \"Check / Restrict Access\"\n      }\n    ]\n  };\n\n  return (\n    <div className=\"p-6\">\n      <DeviceDetailView \n        device={mockDeviceData}\n        onBack={() => console.log(\"Back to device list\")}\n      />\n    </div>\n  );\n}","size_bytes":3647},"client/src/components/examples/DeviceList.tsx":{"content":"import DeviceList from '../DeviceList';\n\nexport default function DeviceListExample() {\n  //todo: remove mock functionality\n  const mockDevices = [\n    {\n      agentId: \"AGENT005\",\n      hostname: \"DESKTOP-CMM8H3C\",\n      os: \"Windows 11 Home Single Language\",\n      location: \"Bengaluru - Karnataka - India\",\n      username: \"basav\",\n      lastHeartbeat: new Date(Date.now() - 300000).toISOString(),\n      status: \"online\" as const\n    },\n    {\n      agentId: \"AGENT003\", \n      hostname: \"WORKSTATION-01\",\n      os: \"Windows 11 Pro\",\n      location: \"New York - NY - USA\",\n      username: \"john.doe\",\n      lastHeartbeat: new Date(Date.now() - 1800000).toISOString(),\n      status: \"warning\" as const\n    },\n    {\n      agentId: \"AGENT001\",\n      hostname: \"LAPTOP-DEV\",\n      os: \"Windows 10 Enterprise\",\n      location: \"London - England - UK\", \n      username: \"jane.smith\",\n      lastHeartbeat: new Date(Date.now() - 7200000).toISOString(),\n      status: \"offline\" as const\n    },\n    {\n      agentId: \"AGENT007\",\n      hostname: \"SERVER-PROD-01\",\n      os: \"Windows Server 2022\",\n      location: \"Tokyo - Tokyo - Japan\",\n      username: \"admin.server\",\n      lastHeartbeat: new Date(Date.now() - 60000).toISOString(),\n      status: \"online\" as const\n    },\n    {\n      agentId: \"AGENT002\",\n      hostname: \"DEV-MACHINE\",\n      os: \"Windows 11 Pro\",\n      location: \"San Francisco - CA - USA\",\n      username: \"dev.user\",\n      lastHeartbeat: new Date(Date.now() - 3600000).toISOString(), \n      status: \"warning\" as const\n    },\n    {\n      agentId: \"AGENT004\",\n      hostname: \"QA-TESTING\",\n      os: \"Windows 10 Pro\",\n      location: \"Berlin - Berlin - Germany\",\n      username: \"qa.tester\",\n      lastHeartbeat: new Date(Date.now() - 10800000).toISOString(),\n      status: \"offline\" as const\n    }\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <DeviceList \n        devices={mockDevices}\n        onDeviceSelect={(device) => console.log('Selected:', device.hostname)}\n        onRefresh={() => console.log('Refreshing devices...')}\n        isLoading={false}\n      />\n    </div>\n  );\n}","size_bytes":2093},"client/src/components/examples/InstalledApps.tsx":{"content":"import InstalledApps from '../InstalledApps';\n\nexport default function InstalledAppsExample() {\n  //todo: remove mock functionality\n  const mockApps = [\n    {\n      name: \"Google Chrome\",\n      version: \"140.0.7339.208\",\n      publisher: \"Google LLC\",\n      install_location: \"Unknown\"\n    },\n    {\n      name: \"Cursor 0.45.14\",\n      version: \"0.45.14\",\n      publisher: \"Cursor AI, Inc.\",\n      install_location: \"Unknown\"\n    },\n    {\n      name: \"Docker Desktop\",\n      version: \"4.38.0\",\n      publisher: \"Docker Inc.\",\n      install_location: \"C:\\\\Program Files\\\\Docker\\\\Docker\"\n    },\n    {\n      name: \"PostgreSQL 17\",\n      version: \"17.5-2\",\n      publisher: \"PostgreSQL Global Development Group\",\n      install_location: \"C:\\\\Program Files\\\\PostgreSQL\\\\17\"\n    },\n    {\n      name: \"VLC media player\",\n      version: \"3.0.16\",\n      publisher: \"VideoLAN\",\n      install_location: \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\"\n    },\n    {\n      name: \"7-Zip 23.01 (x64)\",\n      version: \"23.01\",\n      publisher: \"Igor Pavlov\",\n      install_location: \"C:\\\\Program Files\\\\7-Zip\\\\\"\n    },\n    {\n      name: \"Node.js\",\n      version: \"22.12.0\",\n      publisher: \"Node.js Foundation\",\n      install_location: \"Unknown\"\n    },\n    {\n      name: \"Git\",\n      version: \"2.44.0\",\n      publisher: \"The Git Development Community\",\n      install_location: \"C:\\\\Program Files\\\\Git\\\\\"\n    }\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Installed Applications</h3>\n      <InstalledApps apps={mockApps} />\n    </div>\n  );\n}","size_bytes":1562},"client/src/components/examples/NetworkInfo.tsx":{"content":"import NetworkInfo from '../NetworkInfo';\n\nexport default function NetworkInfoExample() {\n  //todo: remove mock functionality\n  const mockNetworkData = {\n    localIp: \"192.168.1.80\",\n    publicIp: \"139.167.219.110\", \n    location: \"Bengaluru - Karnataka - India\",\n    nicDetails: [\n      {\n        Description: \"Realtek Gaming GbE Family Controller\",\n        MAC: \"84:69:93:6F:43:04\",\n        ConnectionType: \"LAN\",\n        \"IP Addresses\": \"192.168.1.80, fe80::ba77:9754:bc7:6e3b\"\n      },\n      {\n        Description: \"Intel(R) Wi-Fi 6 AX201 160MHz\",\n        MAC: \"A4:BB:6D:7E:1F:2C\",\n        ConnectionType: \"Wi-Fi\",\n        \"IP Addresses\": \"192.168.1.100\"\n      }\n    ],\n    openPorts: [\n      {\n        ip: \"0.0.0.0\",\n        local_port: 445,\n        process_name: \"System\",\n        protocol: \"TCP\",\n        service: \"SMB\",\n        critical: true,\n        recommendation: \"Check / Restrict Access\"\n      },\n      {\n        ip: \"0.0.0.0\",\n        local_port: 135,\n        process_name: \"svchost.exe\",\n        protocol: \"TCP\",\n        service: \"RPC\",\n        critical: true,\n        recommendation: \"Check / Restrict Access\"\n      },\n      {\n        ip: \"127.0.0.1\",\n        local_port: 5432,\n        process_name: \"postgres.exe\",\n        protocol: \"TCP\",\n        service: \"PostgreSQL\",\n        critical: true,\n        recommendation: \"Check / Restrict Access\"\n      }\n    ]\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Network Information</h3>\n      <NetworkInfo {...mockNetworkData} />\n    </div>\n  );\n}","size_bytes":1559},"client/src/components/examples/ProcessTable.tsx":{"content":"import ProcessTable from '../ProcessTable';\n\nexport default function ProcessTableExample() {\n  //todo: remove mock functionality\n  const mockCpuProcesses = [\n    {\n      pid: 48408,\n      name: \"WmiPrvSE.exe\",\n      cpu_percent: 25.2,\n      memory_percent: 0.505,\n      memory_mb: 37.98\n    },\n    {\n      pid: 5264,\n      name: \"am_aiops_agent_restart.exe\",\n      cpu_percent: 15.6,\n      memory_percent: 0.076,\n      memory_mb: 5.69\n    },\n    {\n      pid: 1896,\n      name: \"dwm.exe\",\n      cpu_percent: 8.5,\n      memory_percent: 1.508,\n      memory_mb: 113.40\n    }\n  ];\n\n  const mockMemoryProcesses = [\n    {\n      pid: 21908,\n      name: \"brave.exe\",\n      cpu_percent: 0.0,\n      memory_percent: 4.095,\n      memory_mb: 308.05\n    },\n    {\n      pid: 3488,\n      name: \"MemCompression\",\n      cpu_percent: 0.0,\n      memory_percent: 3.245,\n      memory_mb: 244.12\n    },\n    {\n      pid: 10268,\n      name: \"explorer.exe\",\n      cpu_percent: 0.0,\n      memory_percent: 2.546,\n      memory_mb: 191.48\n    }\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Process Tables</h3>\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        <ProcessTable\n          processes={mockCpuProcesses}\n          title=\"Top CPU Processes\"\n          type=\"cpu\"\n          systemUsage={{\n            cpu: 15.4,\n            memory: 65.2\n          }}\n        />\n        <ProcessTable\n          processes={mockMemoryProcesses}\n          title=\"Top Memory Processes\"\n          type=\"memory\"\n          systemUsage={{\n            memory: 65.2,\n            totalRam: \"7.35 GB\"\n          }}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1672},"client/src/components/examples/SecurityOverview.tsx":{"content":"import SecurityOverview from '../SecurityOverview';\n\nexport default function SecurityOverviewExample() {\n  //todo: remove mock functionality\n  const mockSecurityData = {\n    windowsDefender: {\n      antivirus_enabled: true,\n      real_time_protection: true,\n      am_service_running: true,\n      last_quick_scan_days_ago: 2\n    },\n    firewall: [\n      { profile: \"Domain\", enabled: true },\n      { profile: \"Private\", enabled: true },\n      { profile: \"Public\", enabled: true }\n    ],\n    uacStatus: \"Enabled\",\n    installedAv: [\n      { name: \"Windows Defender\", state: \"Enabled\" }\n    ],\n    restartPending: false,\n    recentPatches: [\n      { hotfix_id: \"KB5034441\", installed_on: \"2024-01-15T10:30:00Z\" },\n      { hotfix_id: \"KB5034123\", installed_on: \"2024-01-10T14:20:00Z\" },\n      { hotfix_id: \"KB5033375\", installed_on: \"2024-01-05T09:15:00Z\" },\n      { hotfix_id: \"KB5032906\", installed_on: \"2023-12-28T16:45:00Z\" }\n    ]\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Security Overview</h3>\n      <SecurityOverview {...mockSecurityData} />\n    </div>\n  );\n}","size_bytes":1118},"client/src/components/examples/StatusIndicator.tsx":{"content":"import StatusIndicator from '../StatusIndicator';\n\nexport default function StatusIndicatorExample() {\n  return (\n    <div className=\"p-6 space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Status Indicators</h3>\n      <div className=\"flex gap-6\">\n        <StatusIndicator status=\"online\" showLabel />\n        <StatusIndicator status=\"offline\" showLabel />\n        <StatusIndicator status=\"warning\" showLabel />\n        <StatusIndicator status=\"error\" showLabel />\n      </div>\n      <div className=\"flex gap-6\">\n        <StatusIndicator status=\"online\" size=\"lg\" />\n        <StatusIndicator status=\"offline\" size=\"lg\" />\n        <StatusIndicator status=\"warning\" size=\"lg\" />\n        <StatusIndicator status=\"error\" size=\"lg\" />\n      </div>\n    </div>\n  );\n}","size_bytes":763},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-6 space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Theme Toggle</h3>\n      <div className=\"flex items-center gap-4\">\n        <ThemeToggle />\n        <span className=\"text-sm text-muted-foreground\">\n          Click to toggle between light and dark modes\n        </span>\n      </div>\n    </div>\n  );\n}","size_bytes":429},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Multi-Agent Monitoring Dashboard\n\n## Overview\n\nA enterprise-grade monitoring dashboard for managing Windows-based agent systems across distributed environments. The application provides real-time monitoring, system health tracking, and security oversight for remote agents deployed across multiple locations. Built with a modern tech stack featuring React frontend with TypeScript, Express.js backend, and PostgreSQL database with Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **UI Library**: Shadcn/UI components built on Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with custom design system optimized for monitoring dashboards\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful API structure with `/api` prefix routing\n- **Session Management**: PostgreSQL-based session storage using connect-pg-simple\n- **Development**: Hot reloading with tsx for seamless development experience\n\n### Database Design\n- **Primary Database**: PostgreSQL for reliable data persistence\n- **Connection**: Neon serverless PostgreSQL with WebSocket support\n- **Schema Management**: Drizzle Kit for migrations and schema evolution\n- **Current Schema**: User authentication table with extensible design for agent data\n\n### Component Architecture\n- **Design System**: Carbon Design System approach with enterprise monitoring focus\n- **Color Scheme**: Dark mode primary for monitoring environments with light mode alternative\n- **Component Library**: Comprehensive set of monitoring-specific components including DeviceCard, StatusIndicator, ProcessTable, SecurityOverview\n- **Layout System**: Sidebar-based navigation with responsive grid layouts for device management\n\n### Agent Integration Design\n- **Agent Type**: Windows-based Python agents for system monitoring\n- **Data Collection**: System info, process monitoring, security status, network analysis, installed applications\n- **Communication**: Heartbeat-based connectivity with configurable intervals\n- **Data Format**: JSON-structured reports with standardized schemas for consistent parsing\n\n### Security & Monitoring Features\n- **Real-time Status**: Online/offline/warning states with visual indicators\n- **System Metrics**: CPU, memory, disk usage tracking with top process analysis\n- **Security Monitoring**: Windows Defender status, firewall configuration, UAC settings, patch management\n- **Network Analysis**: IP configuration, open port scanning, critical service monitoring\n- **Application Tracking**: Installed software inventory with publisher filtering","size_bytes":3103},"client/src/components/DiskInfo.tsx":{"content":"\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { HardDrive } from \"lucide-react\";\n\ninterface DiskData {\n  Device: string;\n  Total: string;\n  Used: string;\n  Free: string;\n  \"Usage %\": string;\n}\n\ninterface DiskInfoProps {\n  diskData: DiskData[];\n}\n\nexport default function DiskInfo({ diskData }: DiskInfoProps) {\n  const getUsagePercentage = (usageStr: string) => {\n    const percentage = parseFloat(usageStr.replace('%', ''));\n    return isNaN(percentage) ? 0 : percentage;\n  };\n\n  const getUsageColor = (percentage: number) => {\n    if (percentage >= 90) return \"destructive\";\n    if (percentage >= 75) return \"secondary\";\n    return \"default\";\n  };\n\n  if (!diskData || diskData.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <HardDrive className=\"w-5 h-5\" />\n            Disk Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground text-sm\">No disk information available</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <HardDrive className=\"w-5 h-5\" />\n          Disk Information\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {diskData.map((disk, index) => {\n          const usagePercentage = getUsagePercentage(disk[\"Usage %\"]);\n          return (\n            <div key={index} className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <HardDrive className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">{disk.Device}</span>\n                </div>\n                <Badge variant={getUsageColor(usagePercentage)}>\n                  {disk[\"Usage %\"]}\n                </Badge>\n              </div>\n              \n              <Progress value={usagePercentage} className=\"h-2\" />\n              \n              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Total:</span>\n                  <div className=\"font-mono\">{disk.Total}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Used:</span>\n                  <div className=\"font-mono\">{disk.Used}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Free:</span>\n                  <div className=\"font-mono\">{disk.Free}</div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2898},"client/src/pages/SystemMonitor.tsx":{"content":"import DeviceList from \"@/components/DeviceList\";\nimport DeviceDetailView from \"@/components/DeviceDetailView\";\nimport { useState, useEffect } from \"react\";\n\ninterface Device {\n  agentId: string;\n  hostname: string;\n  os: string;\n  location: string;\n  username: string;\n  lastHeartbeat: string;\n  status: \"online\" | \"offline\" | \"warning\";\n}\n\ninterface DetailedDevice {\n  agentId: string;\n  hostname: string;\n  os: string;\n  location: string;\n  username: string;\n  lastHeartbeat: string;\n  status: \"online\" | \"offline\" | \"warning\";\n  systemInfo?: {\n    cpu: string;\n    ram: string;\n    graphics: string;\n    totalDisk: string;\n  };\n  diskInfo?: Array<{\n    Device: string;\n    Total: string;\n    Used: string;\n    Free: string;\n    \"Usage %\": string;\n  }>;\n  topProcesses?: {\n    top_cpu: Array<{\n      pid: number;\n      name: string;\n      cpu_percent: number;\n      memory_percent: number;\n      memory_mb: number;\n    }>;\n    top_memory: Array<{\n      pid: number;\n      name: string;\n      cpu_percent: number;\n      memory_percent: number;\n      memory_mb: number;\n    }>;\n  };\n  networkInfo?: {\n    local_ip: string;\n    public_ip: string;\n    location: string;\n    nic_details: Array<{\n      Description: string;\n      MAC: string;\n      ConnectionType: string;\n      \"IP Addresses\": string;\n    }>;\n  };\n  windowsSecurity?: {\n    windows_defender: {\n      antivirus_enabled: boolean;\n      real_time_protection: boolean;\n      am_service_running: boolean;\n      last_quick_scan_days_ago: number;\n    };\n    firewall: Array<{\n      profile: string;\n      enabled: boolean;\n    }>;\n    uac_status: string;\n    installed_av: Array<{\n      name: string;\n      state: string;\n    }>;\n    restart_pending: boolean;\n    recent_patches: Array<{\n      hotfix_id: string;\n      installed_on: string;\n    }>;\n  };\n  installedApps?: Array<{\n    name: string;\n    version: string;\n    publisher: string;\n    install_location: string;\n  }>;\n  openPorts?: Array<{\n    ip: string;\n    local_port: number;\n    process_name: string;\n    protocol: string;\n    service: string;\n    critical: boolean;\n    recommendation: string;\n  }>;\n}\n\nexport default function SystemMonitor() {\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [selectedDevice, setSelectedDevice] = useState<Device | null>(null);\n  const [detailedDevice, setDetailedDevice] = useState<DetailedDevice | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingDetails, setIsLoadingDetails] = useState(false);\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  const fetchDevices = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/agents');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data: Device[] = await response.json();\n      setDevices(data || []);\n    } catch (error) {\n      console.error(\"Failed to fetch devices:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchDeviceDetails = async (agentId: string) => {\n    try {\n      setIsLoadingDetails(true);\n\n      // Fetch the latest report for this agent\n      const reportResponse = await fetch(`/api/agents/${agentId}/latest-report`);\n      let reportData = null;\n\n      if (reportResponse.ok) {\n        reportData = await reportResponse.json();\n      }\n\n      // Combine basic device info with detailed report data\n      const baseDevice = devices.find(d => d.agentId === agentId);\n      if (!baseDevice) return null;\n\n      const detailed: DetailedDevice = {\n        ...baseDevice,\n        systemInfo: reportData?.system_info?.SystemInfo ? {\n          cpu: reportData.system_info.SystemInfo.cpu || \"Unknown\",\n          ram: reportData.system_info.SystemInfo.ram || \"Unknown\",\n          graphics: reportData.system_info.SystemInfo.graphics || \"Unknown\",\n          totalDisk: reportData.system_info.SystemInfo.total_disk || \"Unknown\"\n        } : undefined,\n        diskInfo: reportData?.system_info?.DiskInfo?.map((disk: any) => ({\n          Device: disk.Device || disk.Mountpoint || \"Unknown\",\n          Total: disk.Total || \"Unknown\",\n          Used: disk.Used || \"Unknown\",\n          Free: disk.Free || \"Unknown\",\n          \"Usage %\": disk[\"Usage %\"] || \"Unknown\"\n        })) || undefined,\n        topProcesses: reportData?.top_processes ? {\n          top_cpu: reportData.top_processes.top_cpu || [],\n          top_memory: reportData.top_processes.top_memory || []\n        } : undefined,\n        networkInfo: reportData?.system_info?.NetworkInfo ? {\n          local_ip: reportData.system_info.NetworkInfo.local_ip || \"Unknown\",\n          public_ip: reportData.system_info.NetworkInfo.public_ip || \"Unknown\",\n          location: reportData.system_info.NetworkInfo.location || \"Unknown\",\n          nic_details: reportData.system_info.NetworkInfo.nic_details || []\n        } : undefined,\n        windowsSecurity: reportData?.windows_security || undefined,\n        installedApps: reportData?.installed_apps?.installed_apps || [],\n        openPorts: reportData?.open_ports?.open_ports || []\n      };\n\n      setDetailedDevice(detailed);\n    } catch (error) {\n      console.error(\"Failed to fetch device details:\", error);\n      // Still set basic device info even if detailed data fails\n      const baseDevice = devices.find(d => d.agentId === agentId);\n      if (baseDevice) {\n        setDetailedDevice(baseDevice as DetailedDevice);\n      }\n    } finally {\n      setIsLoadingDetails(false);\n    }\n  };\n\n  const handleDeviceSelect = async (device: Device) => {\n    console.log(\"Selected device:\", device.hostname);\n    setSelectedDevice(device);\n    await fetchDeviceDetails(device.agentId);\n  };\n\n  const handleBackToList = () => {\n    setSelectedDevice(null);\n    setDetailedDevice(null);\n  };\n\n  const handleRefresh = () => {\n    console.log('Refreshing system monitor data...');\n    fetchDevices();\n  };\n\n  if (selectedDevice && detailedDevice) {\n    return (\n      <DeviceDetailView\n        device={detailedDevice}\n        onBack={handleBackToList}\n        isLoading={isLoadingDetails}\n      />\n    );\n  }\n\n  return (\n    <DeviceList\n      devices={devices}\n      onDeviceSelect={handleDeviceSelect}\n      onRefresh={handleRefresh}\n      isLoading={isLoading}\n    />\n  );\n}","size_bytes":6271}},"version":1}